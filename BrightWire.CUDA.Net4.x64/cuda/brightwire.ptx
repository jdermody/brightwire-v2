//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_35
.address_size 64

	// .globl	IsFinite
// _ZZ13FindMinAndMaxE5block has been demoted
// _ZZ7FindSumE5block has been demoted
// _ZZ10FindStdDevE5block has been demoted

.visible .entry IsFinite(
	.param .u64 IsFinite_param_0,
	.param .u64 IsFinite_param_1,
	.param .u32 IsFinite_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [IsFinite_param_0];
	ld.param.u64 	%rd4, [IsFinite_param_1];
	ld.param.u32 	%r6, [IsFinite_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB0_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB0_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.lt.ftz.f32	%p2, %f2, 0f7F800000;
	selp.f32	%f3, 0f00000000, 0f3F800000, %p2;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p3, %r10, %r6;
	@%p3 bra 	BB0_2;

BB0_3:
	ret;
}

	// .globl	PointwiseMultiply
.visible .entry PointwiseMultiply(
	.param .u64 PointwiseMultiply_param_0,
	.param .u64 PointwiseMultiply_param_1,
	.param .u32 PointwiseMultiply_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [PointwiseMultiply_param_0];
	ld.param.u64 	%rd4, [PointwiseMultiply_param_1];
	ld.param.u32 	%r6, [PointwiseMultiply_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB1_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB1_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	add.s64 	%rd7, %rd1, %rd5;
	ld.global.f32 	%f1, [%rd7];
	ld.global.nc.f32 	%f2, [%rd6];
	mul.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB1_2;

BB1_3:
	ret;
}

	// .globl	PointwiseDivide
.visible .entry PointwiseDivide(
	.param .u64 PointwiseDivide_param_0,
	.param .u64 PointwiseDivide_param_1,
	.param .u32 PointwiseDivide_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [PointwiseDivide_param_0];
	ld.param.u64 	%rd4, [PointwiseDivide_param_1];
	ld.param.u32 	%r6, [PointwiseDivide_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB2_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB2_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	add.s64 	%rd7, %rd1, %rd5;
	ld.global.f32 	%f1, [%rd7];
	ld.global.nc.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB2_2;

BB2_3:
	ret;
}

	// .globl	Sqrt
.visible .entry Sqrt(
	.param .u64 Sqrt_param_0,
	.param .u64 Sqrt_param_1,
	.param .u32 Sqrt_param_2,
	.param .f32 Sqrt_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Sqrt_param_0];
	ld.param.u64 	%rd4, [Sqrt_param_1];
	ld.param.u32 	%r6, [Sqrt_param_2];
	ld.param.f32 	%f1, [Sqrt_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB3_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB3_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	add.ftz.f32 	%f3, %f2, %f1;
	sqrt.approx.ftz.f32 	%f4, %f3;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f4;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB3_2;

BB3_3:
	ret;
}

	// .globl	AddInPlace
.visible .entry AddInPlace(
	.param .u64 AddInPlace_param_0,
	.param .u64 AddInPlace_param_1,
	.param .u32 AddInPlace_param_2,
	.param .f32 AddInPlace_param_3,
	.param .f32 AddInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [AddInPlace_param_0];
	ld.param.u64 	%rd4, [AddInPlace_param_1];
	ld.param.u32 	%r6, [AddInPlace_param_2];
	ld.param.f32 	%f1, [AddInPlace_param_3];
	ld.param.f32 	%f2, [AddInPlace_param_4];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB4_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB4_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.f32 	%f3, [%rd6];
	add.s64 	%rd7, %rd1, %rd5;
	ld.global.nc.f32 	%f4, [%rd7];
	mul.ftz.f32 	%f5, %f4, %f2;
	fma.rn.ftz.f32 	%f6, %f3, %f1, %f5;
	st.global.f32 	[%rd6], %f6;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB4_2;

BB4_3:
	ret;
}

	// .globl	SubtractInPlace
.visible .entry SubtractInPlace(
	.param .u64 SubtractInPlace_param_0,
	.param .u64 SubtractInPlace_param_1,
	.param .u32 SubtractInPlace_param_2,
	.param .f32 SubtractInPlace_param_3,
	.param .f32 SubtractInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [SubtractInPlace_param_0];
	ld.param.u64 	%rd4, [SubtractInPlace_param_1];
	ld.param.u32 	%r6, [SubtractInPlace_param_2];
	ld.param.f32 	%f1, [SubtractInPlace_param_3];
	ld.param.f32 	%f2, [SubtractInPlace_param_4];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB5_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB5_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.f32 	%f3, [%rd6];
	mul.ftz.f32 	%f4, %f3, %f1;
	add.s64 	%rd7, %rd1, %rd5;
	ld.global.nc.f32 	%f5, [%rd7];
	mul.ftz.f32 	%f6, %f5, %f2;
	sub.ftz.f32 	%f7, %f4, %f6;
	st.global.f32 	[%rd6], %f7;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB5_2;

BB5_3:
	ret;
}

	// .globl	AddToEachRow
.visible .entry AddToEachRow(
	.param .u64 AddToEachRow_param_0,
	.param .u64 AddToEachRow_param_1,
	.param .u32 AddToEachRow_param_2,
	.param .u32 AddToEachRow_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [AddToEachRow_param_0];
	ld.param.u64 	%rd4, [AddToEachRow_param_1];
	ld.param.u32 	%r10, [AddToEachRow_param_2];
	ld.param.u32 	%r11, [AddToEachRow_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB6_5;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB6_2:
	setp.ge.s32	%p2, %r3, %r11;
	mov.u32 	%r21, %r3;
	@%p2 bra 	BB6_4;

BB6_3:
	mul.wide.s32 	%rd5, %r21, 4;
	add.s64 	%rd6, %rd2, %rd5;
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.nc.f32 	%f2, [%rd6];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB6_3;

BB6_4:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB6_2;

BB6_5:
	ret;
}

	// .globl	AddToEachColumn
.visible .entry AddToEachColumn(
	.param .u64 AddToEachColumn_param_0,
	.param .u64 AddToEachColumn_param_1,
	.param .u32 AddToEachColumn_param_2,
	.param .u32 AddToEachColumn_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [AddToEachColumn_param_0];
	ld.param.u64 	%rd4, [AddToEachColumn_param_1];
	ld.param.u32 	%r10, [AddToEachColumn_param_2];
	ld.param.u32 	%r11, [AddToEachColumn_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB7_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB7_2:
	setp.ge.s32	%p2, %r3, %r11;
	@%p2 bra 	BB7_5;

	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mov.u32 	%r21, %r3;

BB7_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.f32 	%f2, [%rd8];
	add.ftz.f32 	%f3, %f1, %f2;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB7_4;

BB7_5:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB7_2;

BB7_6:
	ret;
}

	// .globl	TanH
.visible .entry TanH(
	.param .u64 TanH_param_0,
	.param .u64 TanH_param_1,
	.param .u32 TanH_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd4, [TanH_param_0];
	ld.param.u64 	%rd5, [TanH_param_1];
	ld.param.u32 	%r6, [TanH_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r16, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r16, %r6;
	@%p1 bra 	BB8_6;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB8_2:
	cvt.s64.s32	%rd3, %r16;
	mul.wide.s32 	%rd6, %r16, 4;
	add.s64 	%rd7, %rd2, %rd6;
	ld.global.nc.f32 	%f1, [%rd7];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p2, %f2, 0f3F0CCCCD;
	@%p2 bra 	BB8_4;
	bra.uni 	BB8_3;

BB8_4:
	mul.ftz.f32 	%f21, %f1, %f1;
	mov.f32 	%f22, 0fBD57BE66;
	mov.f32 	%f23, 0f3C86A81B;
	fma.rn.ftz.f32 	%f24, %f23, %f21, %f22;
	mov.f32 	%f25, 0f3E08677B;
	fma.rn.ftz.f32 	%f26, %f24, %f21, %f25;
	mov.f32 	%f27, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f28, %f26, %f21, %f27;
	mul.ftz.f32 	%f29, %f21, %f28;
	fma.rn.ftz.f32 	%f30, %f29, %f1, %f1;
	add.ftz.f32 	%f31, %f1, %f1;
	setp.eq.ftz.f32	%p4, %f1, 0f00000000;
	selp.f32	%f32, %f31, %f30, %p4;
	bra.uni 	BB8_5;

BB8_3:
	add.ftz.f32 	%f8, %f2, %f2;
	mul.ftz.f32 	%f9, %f8, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f10, %f9;
	mov.f32 	%f11, 0fBF317200;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f8;
	mov.f32 	%f13, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f14, %f10, %f13, %f12;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f16, %f15;
	ex2.approx.ftz.f32 	%f17, %f10;
	mov.f32 	%f18, 0f3F800000;
	fma.rn.ftz.f32 	%f7, %f16, %f17, %f18;
	// inline asm
	rcp.approx.ftz.f32 %f6,%f7;
	// inline asm
	mov.f32 	%f19, 0fC0000000;
	fma.rn.ftz.f32 	%f20, %f6, %f19, %f18;
	mov.b32 	 %r10, %f20;
	setp.ltu.ftz.f32	%p3, %f2, 0f42B00000;
	selp.b32	%r11, %r10, 1065353216, %p3;
	mov.b32 	 %r12, %f1;
	and.b32  	%r13, %r12, -2147483648;
	or.b32  	%r14, %r11, %r13;
	mov.b32 	 %f32, %r14;

BB8_5:
	add.s64 	%rd9, %rd1, %rd6;
	st.global.f32 	[%rd9], %f32;
	cvt.u32.u64	%r15, %rd3;
	add.s32 	%r16, %r3, %r15;
	setp.lt.s32	%p5, %r16, %r6;
	@%p5 bra 	BB8_2;

BB8_6:
	ret;
}

	// .globl	TanHDerivative
.visible .entry TanHDerivative(
	.param .u64 TanHDerivative_param_0,
	.param .u64 TanHDerivative_param_1,
	.param .u32 TanHDerivative_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<36>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd4, [TanHDerivative_param_0];
	ld.param.u64 	%rd5, [TanHDerivative_param_1];
	ld.param.u32 	%r6, [TanHDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r16, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r16, %r6;
	@%p1 bra 	BB9_6;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB9_2:
	cvt.s64.s32	%rd3, %r16;
	mul.wide.s32 	%rd6, %r16, 4;
	add.s64 	%rd7, %rd2, %rd6;
	ld.global.nc.f32 	%f1, [%rd7];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p2, %f2, 0f3F0CCCCD;
	@%p2 bra 	BB9_4;
	bra.uni 	BB9_3;

BB9_4:
	mul.ftz.f32 	%f21, %f1, %f1;
	mov.f32 	%f22, 0fBD57BE66;
	mov.f32 	%f23, 0f3C86A81B;
	fma.rn.ftz.f32 	%f24, %f23, %f21, %f22;
	mov.f32 	%f25, 0f3E08677B;
	fma.rn.ftz.f32 	%f26, %f24, %f21, %f25;
	mov.f32 	%f27, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f28, %f26, %f21, %f27;
	mul.ftz.f32 	%f29, %f21, %f28;
	fma.rn.ftz.f32 	%f30, %f29, %f1, %f1;
	add.ftz.f32 	%f31, %f1, %f1;
	setp.eq.ftz.f32	%p4, %f1, 0f00000000;
	selp.f32	%f35, %f31, %f30, %p4;
	bra.uni 	BB9_5;

BB9_3:
	add.ftz.f32 	%f8, %f2, %f2;
	mul.ftz.f32 	%f9, %f8, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f10, %f9;
	mov.f32 	%f11, 0fBF317200;
	fma.rn.ftz.f32 	%f12, %f10, %f11, %f8;
	mov.f32 	%f13, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f14, %f10, %f13, %f12;
	mul.ftz.f32 	%f15, %f14, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f16, %f15;
	ex2.approx.ftz.f32 	%f17, %f10;
	mov.f32 	%f18, 0f3F800000;
	fma.rn.ftz.f32 	%f7, %f16, %f17, %f18;
	// inline asm
	rcp.approx.ftz.f32 %f6,%f7;
	// inline asm
	mov.f32 	%f19, 0fC0000000;
	fma.rn.ftz.f32 	%f20, %f6, %f19, %f18;
	mov.b32 	 %r10, %f20;
	setp.ltu.ftz.f32	%p3, %f2, 0f42B00000;
	selp.b32	%r11, %r10, 1065353216, %p3;
	mov.b32 	 %r12, %f1;
	and.b32  	%r13, %r12, -2147483648;
	or.b32  	%r14, %r11, %r13;
	mov.b32 	 %f35, %r14;

BB9_5:
	mul.ftz.f32 	%f32, %f35, %f35;
	mov.f32 	%f33, 0f3F800000;
	sub.ftz.f32 	%f34, %f33, %f32;
	add.s64 	%rd9, %rd1, %rd6;
	st.global.f32 	[%rd9], %f34;
	cvt.u32.u64	%r15, %rd3;
	add.s32 	%r16, %r3, %r15;
	setp.lt.s32	%p5, %r16, %r6;
	@%p5 bra 	BB9_2;

BB9_6:
	ret;
}

	// .globl	Sigmoid
.visible .entry Sigmoid(
	.param .u64 Sigmoid_param_0,
	.param .u64 Sigmoid_param_1,
	.param .u32 Sigmoid_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Sigmoid_param_0];
	ld.param.u64 	%rd4, [Sigmoid_param_1];
	ld.param.u32 	%r6, [Sigmoid_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB10_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB10_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f5;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB10_2;

BB10_3:
	ret;
}

	// .globl	SigmoidDerivative
.visible .entry SigmoidDerivative(
	.param .u64 SigmoidDerivative_param_0,
	.param .u64 SigmoidDerivative_param_1,
	.param .u32 SigmoidDerivative_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [SigmoidDerivative_param_0];
	ld.param.u64 	%rd4, [SigmoidDerivative_param_1];
	ld.param.u32 	%r6, [SigmoidDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB11_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB11_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	mov.f32 	%f6, 0f3F800000;
	sub.ftz.f32 	%f7, %f6, %f5;
	mul.ftz.f32 	%f8, %f5, %f7;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f8;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB11_2;

BB11_3:
	ret;
}

	// .globl	RELU
.visible .entry RELU(
	.param .u64 RELU_param_0,
	.param .u64 RELU_param_1,
	.param .u32 RELU_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [RELU_param_0];
	ld.param.u64 	%rd4, [RELU_param_1];
	ld.param.u32 	%r6, [RELU_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB12_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB12_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	selp.f32	%f2, %f1, 0f00000000, %p2;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p3, %r10, %r6;
	@%p3 bra 	BB12_2;

BB12_3:
	ret;
}

	// .globl	RELUDerivative
.visible .entry RELUDerivative(
	.param .u64 RELUDerivative_param_0,
	.param .u64 RELUDerivative_param_1,
	.param .u32 RELUDerivative_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [RELUDerivative_param_0];
	ld.param.u64 	%rd4, [RELUDerivative_param_1];
	ld.param.u32 	%r6, [RELUDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB13_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB13_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	selp.f32	%f2, 0f3F800000, 0f00000000, %p2;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p3, %r10, %r6;
	@%p3 bra 	BB13_2;

BB13_3:
	ret;
}

	// .globl	LeakyRELU
.visible .entry LeakyRELU(
	.param .u64 LeakyRELU_param_0,
	.param .u64 LeakyRELU_param_1,
	.param .u32 LeakyRELU_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [LeakyRELU_param_0];
	ld.param.u64 	%rd4, [LeakyRELU_param_1];
	ld.param.u32 	%r6, [LeakyRELU_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB14_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB14_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	mul.ftz.f32 	%f2, %f1, 0f3C23D70A;
	selp.f32	%f3, %f1, %f2, %p2;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p3, %r10, %r6;
	@%p3 bra 	BB14_2;

BB14_3:
	ret;
}

	// .globl	LeakyRELUDerivative
.visible .entry LeakyRELUDerivative(
	.param .u64 LeakyRELUDerivative_param_0,
	.param .u64 LeakyRELUDerivative_param_1,
	.param .u32 LeakyRELUDerivative_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [LeakyRELUDerivative_param_0];
	ld.param.u64 	%rd4, [LeakyRELUDerivative_param_1];
	ld.param.u32 	%r6, [LeakyRELUDerivative_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB15_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB15_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.gtu.ftz.f32	%p2, %f1, 0f00000000;
	selp.f32	%f2, 0f3F800000, 0f3C23D70A, %p2;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p3, %r10, %r6;
	@%p3 bra 	BB15_2;

BB15_3:
	ret;
}

	// .globl	Reverse
.visible .entry Reverse(
	.param .u64 Reverse_param_0,
	.param .u64 Reverse_param_1,
	.param .u32 Reverse_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Reverse_param_0];
	ld.param.u64 	%rd4, [Reverse_param_1];
	ld.param.u32 	%r7, [Reverse_param_2];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r8, %r1, %r9;
	setp.ge.s32	%p1, %r12, %r7;
	@%p1 bra 	BB16_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	add.s32 	%r3, %r7, -1;
	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r4, %r10, %r1;

BB16_2:
	mul.wide.s32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	sub.s32 	%r11, %r3, %r12;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f1;
	add.s32 	%r12, %r4, %r12;
	setp.lt.s32	%p2, %r12, %r7;
	@%p2 bra 	BB16_2;

BB16_3:
	ret;
}

	// .globl	SumRows
.visible .entry SumRows(
	.param .u64 SumRows_param_0,
	.param .u64 SumRows_param_1,
	.param .u32 SumRows_param_2,
	.param .u32 SumRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd4, [SumRows_param_0];
	ld.param.u64 	%rd5, [SumRows_param_1];
	ld.param.u32 	%r10, [SumRows_param_2];
	ld.param.u32 	%r11, [SumRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB17_6;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB17_2:
	setp.ge.s32	%p2, %r3, %r11;
	@%p2 bra 	BB17_5;

	mul.wide.s32 	%rd6, %r20, 4;
	add.s64 	%rd3, %rd1, %rd6;
	mov.u32 	%r21, %r3;

BB17_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	atom.global.add.f32 	%f2, [%rd3], %f1;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB17_4;

BB17_5:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB17_2;

BB17_6:
	ret;
}

	// .globl	SumColumns
.visible .entry SumColumns(
	.param .u64 SumColumns_param_0,
	.param .u64 SumColumns_param_1,
	.param .u32 SumColumns_param_2,
	.param .u32 SumColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [SumColumns_param_0];
	ld.param.u64 	%rd4, [SumColumns_param_1];
	ld.param.u32 	%r10, [SumColumns_param_2];
	ld.param.u32 	%r11, [SumColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB18_5;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB18_2:
	setp.ge.s32	%p2, %r3, %r11;
	mov.u32 	%r21, %r3;
	@%p2 bra 	BB18_4;

BB18_3:
	mul.wide.s32 	%rd5, %r21, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	atom.global.add.f32 	%f2, [%rd6], %f1;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB18_3;

BB18_4:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB18_2;

BB18_5:
	ret;
}

	// .globl	MemClear
.visible .entry MemClear(
	.param .u64 MemClear_param_0,
	.param .u32 MemClear_param_1,
	.param .u32 MemClear_param_2,
	.param .u32 MemClear_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [MemClear_param_0];
	ld.param.u32 	%r6, [MemClear_param_1];
	ld.param.u32 	%r7, [MemClear_param_2];
	ld.param.u32 	%r8, [MemClear_param_3];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r14, %r9, %r1, %r10;
	setp.ge.s32	%p1, %r14, %r6;
	@%p1 bra 	BB19_3;

	cvta.to.global.u64 	%rd1, %rd2;
	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r11, %r1;

BB19_2:
	mad.lo.s32 	%r12, %r14, %r8, %r7;
	mul.wide.s32 	%rd3, %r12, 4;
	add.s64 	%rd4, %rd1, %rd3;
	mov.u32 	%r13, 0;
	st.global.u32 	[%rd4], %r13;
	add.s32 	%r14, %r3, %r14;
	setp.lt.s32	%p2, %r14, %r6;
	@%p2 bra 	BB19_2;

BB19_3:
	ret;
}

	// .globl	FindMinAndMax
.visible .entry FindMinAndMax(
	.param .u64 FindMinAndMax_param_0,
	.param .u32 FindMinAndMax_param_1,
	.param .u64 FindMinAndMax_param_2,
	.param .u64 FindMinAndMax_param_3
)
{
	.reg .pred 	%p<40>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<54>;
	.reg .b32 	%r<44>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 _ZZ13FindMinAndMaxE5block[1024];

	ld.param.u64 	%rd1, [FindMinAndMax_param_0];
	ld.param.u32 	%r17, [FindMinAndMax_param_1];
	ld.param.u64 	%rd2, [FindMinAndMax_param_2];
	ld.param.u64 	%rd3, [FindMinAndMax_param_3];
	mov.u32 	%r18, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r18, %r1;
	mov.u32 	%r3, %tid.x;
	add.s32 	%r4, %r2, %r3;
	mov.f32 	%f43, 0f00000000;
	setp.ge.s32	%p1, %r4, %r17;
	@%p1 bra 	BB20_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f43, [%rd6];

BB20_2:
	shl.b32 	%r19, %r3, 2;
	mov.u32 	%r20, _ZZ13FindMinAndMaxE5block;
	add.s32 	%r21, %r20, %r19;
	st.shared.f32 	[%r21], %f43;
	bar.sync 	0;
	setp.ne.s32	%p2, %r3, 0;
	@%p2 bra 	BB20_13;

	sub.s32 	%r22, %r17, %r4;
	mov.u32 	%r23, 256;
	min.s32 	%r5, %r22, %r23;
	mov.f32 	%f53, 0f7F7FFFFF;
	mov.f32 	%f52, 0f00800000;
	setp.lt.s32	%p3, %r5, 1;
	@%p3 bra 	BB20_12;

	add.s32 	%r26, %r2, -1;
	sub.s32 	%r27, %r26, %r17;
	setp.gt.s32	%p4, %r27, -257;
	not.b32 	%r28, %r27;
	selp.b32	%r6, %r28, 256, %p4;
	and.b32  	%r7, %r6, 3;
	mov.f32 	%f45, 0f7F7FFFFF;
	mov.f32 	%f44, 0f00800000;
	mov.u32 	%r43, 0;
	mov.f32 	%f53, 0f00000000;
	setp.eq.s32	%p5, %r7, 0;
	@%p5 bra 	BB20_5;
	bra.uni 	BB20_6;

BB20_5:
	mov.f32 	%f52, %f53;
	bra.uni 	BB20_9;

BB20_6:
	setp.eq.s32	%p6, %r7, 1;
	@%p6 bra 	BB20_8;

	setp.eq.s32	%p7, %r7, 2;
	setp.ne.s32	%p8, %r7, 2;
	selp.u32	%r29, 1, 0, %p8;
	ld.shared.f32 	%f28, [_ZZ13FindMinAndMaxE5block];
	selp.f32	%f29, 0f00800000, %f28, %p7;
	selp.f32	%f30, 0f7F7FFFFF, %f28, %p7;
	selp.u16	%rs1, 1, 0, %p8;
	mul.wide.u16 	%r31, %rs1, 4;
	add.s32 	%r32, %r20, %r31;
	ld.shared.f32 	%f31, [%r32];
	setp.gt.ftz.f32	%p9, %f31, %f29;
	or.pred  	%p10, %p7, %p9;
	selp.f32	%f44, %f31, %f29, %p10;
	setp.lt.ftz.f32	%p11, %f31, %f30;
	or.pred  	%p12, %p7, %p11;
	selp.f32	%f45, %f31, %f30, %p12;
	add.s32 	%r43, %r29, 1;

BB20_8:
	shl.b32 	%r33, %r43, 2;
	add.s32 	%r35, %r20, %r33;
	ld.shared.f32 	%f32, [%r35];
	setp.gt.ftz.f32	%p13, %f32, %f44;
	setp.eq.s32	%p14, %r43, 0;
	or.pred  	%p15, %p14, %p13;
	selp.f32	%f44, %f32, %f44, %p15;
	setp.lt.ftz.f32	%p16, %f32, %f45;
	or.pred  	%p17, %p14, %p16;
	selp.f32	%f45, %f32, %f45, %p17;
	add.s32 	%r43, %r43, 1;
	mov.f32 	%f53, %f45;
	mov.f32 	%f52, %f44;

BB20_9:
	setp.lt.u32	%p18, %r6, 4;
	@%p18 bra 	BB20_12;

	neg.s32 	%r42, %r43;
	mov.f32 	%f52, %f44;
	mov.f32 	%f53, %f45;

BB20_11:
	shl.b32 	%r36, %r42, 2;
	sub.s32 	%r38, %r20, %r36;
	ld.shared.f32 	%f33, [%r38];
	setp.gt.ftz.f32	%p19, %f33, %f52;
	setp.eq.s32	%p20, %r43, 0;
	or.pred  	%p21, %p20, %p19;
	selp.f32	%f34, %f33, %f52, %p21;
	setp.lt.ftz.f32	%p22, %f33, %f53;
	or.pred  	%p23, %p20, %p22;
	selp.f32	%f35, %f33, %f53, %p23;
	setp.eq.s32	%p24, %r43, -1;
	ld.shared.f32 	%f36, [%r38+4];
	setp.gt.ftz.f32	%p25, %f36, %f34;
	or.pred  	%p26, %p24, %p25;
	selp.f32	%f37, %f36, %f34, %p26;
	setp.lt.ftz.f32	%p27, %f36, %f35;
	or.pred  	%p28, %p24, %p27;
	selp.f32	%f38, %f36, %f35, %p28;
	add.s32 	%r39, %r43, 2;
	setp.eq.s32	%p29, %r39, 0;
	ld.shared.f32 	%f39, [%r38+8];
	setp.gt.ftz.f32	%p30, %f39, %f37;
	or.pred  	%p31, %p29, %p30;
	selp.f32	%f40, %f39, %f37, %p31;
	setp.lt.ftz.f32	%p32, %f39, %f38;
	or.pred  	%p33, %p29, %p32;
	selp.f32	%f41, %f39, %f38, %p33;
	setp.eq.s32	%p34, %r39, -1;
	ld.shared.f32 	%f42, [%r38+12];
	setp.gt.ftz.f32	%p35, %f42, %f40;
	or.pred  	%p36, %p34, %p35;
	selp.f32	%f52, %f42, %f40, %p36;
	setp.lt.ftz.f32	%p37, %f42, %f41;
	or.pred  	%p38, %p34, %p37;
	selp.f32	%f53, %f42, %f41, %p38;
	add.s32 	%r42, %r42, -4;
	add.s32 	%r43, %r43, 4;
	setp.lt.s32	%p39, %r43, %r5;
	@%p39 bra 	BB20_11;

BB20_12:
	cvta.to.global.u64 	%rd7, %rd3;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f53;
	add.s64 	%rd11, %rd7, %rd9;
	st.global.f32 	[%rd11], %f52;

BB20_13:
	ret;
}

	// .globl	FindSum
.visible .entry FindSum(
	.param .u64 FindSum_param_0,
	.param .u32 FindSum_param_1,
	.param .u64 FindSum_param_2
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ7FindSumE5block[1024];

	ld.param.u64 	%rd1, [FindSum_param_0];
	ld.param.u32 	%r15, [FindSum_param_1];
	ld.param.u64 	%rd2, [FindSum_param_2];
	mov.u32 	%r16, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r16, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r15;
	@%p1 bra 	BB21_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r3, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f10, [%rd5];
	shl.b32 	%r17, %r2, 2;
	mov.u32 	%r18, _ZZ7FindSumE5block;
	add.s32 	%r19, %r18, %r17;
	st.shared.f32 	[%r19], %f10;

BB21_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB21_14;

	shl.b32 	%r20, %r1, 8;
	sub.s32 	%r21, %r15, %r20;
	mov.u32 	%r22, 256;
	min.s32 	%r4, %r21, %r22;
	mov.f32 	%f29, 0f00000000;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB21_13;

	and.b32  	%r26, %r4, 3;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r38, 0;
	setp.eq.s32	%p4, %r26, 0;
	@%p4 bra 	BB21_10;

	setp.eq.s32	%p5, %r26, 1;
	@%p5 bra 	BB21_9;

	setp.eq.s32	%p6, %r26, 2;
	@%p6 bra 	BB21_8;

	ld.shared.f32 	%f15, [_ZZ7FindSumE5block];
	add.ftz.f32 	%f29, %f15, 0f00000000;
	mov.u32 	%r38, 1;

BB21_8:
	shl.b32 	%r28, %r38, 2;
	mov.u32 	%r29, _ZZ7FindSumE5block;
	add.s32 	%r30, %r29, %r28;
	ld.shared.f32 	%f16, [%r30];
	add.ftz.f32 	%f29, %f29, %f16;
	add.s32 	%r38, %r38, 1;

BB21_9:
	shl.b32 	%r31, %r38, 2;
	mov.u32 	%r32, _ZZ7FindSumE5block;
	add.s32 	%r33, %r32, %r31;
	ld.shared.f32 	%f17, [%r33];
	add.ftz.f32 	%f29, %f29, %f17;
	add.s32 	%r38, %r38, 1;

BB21_10:
	setp.lt.u32	%p7, %r4, 4;
	@%p7 bra 	BB21_13;

	shl.b32 	%r34, %r38, 2;
	mov.u32 	%r35, _ZZ7FindSumE5block;
	add.s32 	%r39, %r35, %r34;

BB21_12:
	ld.shared.f32 	%f18, [%r39];
	add.ftz.f32 	%f19, %f29, %f18;
	ld.shared.f32 	%f20, [%r39+4];
	add.ftz.f32 	%f21, %f19, %f20;
	ld.shared.f32 	%f22, [%r39+8];
	add.ftz.f32 	%f23, %f21, %f22;
	ld.shared.f32 	%f24, [%r39+12];
	add.ftz.f32 	%f29, %f23, %f24;
	add.s32 	%r39, %r39, 16;
	add.s32 	%r38, %r38, 4;
	setp.lt.s32	%p8, %r38, %r4;
	@%p8 bra 	BB21_12;

BB21_13:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f29;

BB21_14:
	ret;
}

	// .globl	FindStdDev
.visible .entry FindStdDev(
	.param .u64 FindStdDev_param_0,
	.param .u32 FindStdDev_param_1,
	.param .f32 FindStdDev_param_2,
	.param .u64 FindStdDev_param_3
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<38>;
	.reg .b32 	%r<41>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZ10FindStdDevE5block[1024];

	ld.param.u64 	%rd1, [FindStdDev_param_0];
	ld.param.u32 	%r15, [FindStdDev_param_1];
	ld.param.f32 	%f10, [FindStdDev_param_2];
	ld.param.u64 	%rd2, [FindStdDev_param_3];
	mov.u32 	%r16, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r16, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r15;
	@%p1 bra 	BB22_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r3, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f11, [%rd5];
	shl.b32 	%r17, %r2, 2;
	mov.u32 	%r18, _ZZ10FindStdDevE5block;
	add.s32 	%r19, %r18, %r17;
	st.shared.f32 	[%r19], %f11;

BB22_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB22_14;

	shl.b32 	%r20, %r1, 8;
	sub.s32 	%r21, %r15, %r20;
	mov.u32 	%r22, 256;
	min.s32 	%r4, %r21, %r22;
	mov.f32 	%f37, 0f00000000;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB22_13;

	and.b32  	%r26, %r4, 3;
	mov.f32 	%f37, 0f00000000;
	mov.u32 	%r38, 0;
	setp.eq.s32	%p4, %r26, 0;
	@%p4 bra 	BB22_10;

	setp.eq.s32	%p5, %r26, 1;
	@%p5 bra 	BB22_9;

	setp.eq.s32	%p6, %r26, 2;
	@%p6 bra 	BB22_8;

	ld.shared.f32 	%f16, [_ZZ10FindStdDevE5block];
	sub.ftz.f32 	%f17, %f16, %f10;
	fma.rn.ftz.f32 	%f37, %f17, %f17, 0f00000000;
	mov.u32 	%r38, 1;

BB22_8:
	shl.b32 	%r28, %r38, 2;
	mov.u32 	%r29, _ZZ10FindStdDevE5block;
	add.s32 	%r30, %r29, %r28;
	ld.shared.f32 	%f18, [%r30];
	sub.ftz.f32 	%f19, %f18, %f10;
	fma.rn.ftz.f32 	%f37, %f19, %f19, %f37;
	add.s32 	%r38, %r38, 1;

BB22_9:
	shl.b32 	%r31, %r38, 2;
	mov.u32 	%r32, _ZZ10FindStdDevE5block;
	add.s32 	%r33, %r32, %r31;
	ld.shared.f32 	%f20, [%r33];
	sub.ftz.f32 	%f21, %f20, %f10;
	fma.rn.ftz.f32 	%f37, %f21, %f21, %f37;
	add.s32 	%r38, %r38, 1;

BB22_10:
	setp.lt.u32	%p7, %r4, 4;
	@%p7 bra 	BB22_13;

	shl.b32 	%r34, %r38, 2;
	mov.u32 	%r35, _ZZ10FindStdDevE5block;
	add.s32 	%r39, %r35, %r34;

BB22_12:
	ld.shared.f32 	%f22, [%r39];
	sub.ftz.f32 	%f23, %f22, %f10;
	fma.rn.ftz.f32 	%f24, %f23, %f23, %f37;
	ld.shared.f32 	%f25, [%r39+4];
	sub.ftz.f32 	%f26, %f25, %f10;
	fma.rn.ftz.f32 	%f27, %f26, %f26, %f24;
	ld.shared.f32 	%f28, [%r39+8];
	sub.ftz.f32 	%f29, %f28, %f10;
	fma.rn.ftz.f32 	%f30, %f29, %f29, %f27;
	ld.shared.f32 	%f31, [%r39+12];
	sub.ftz.f32 	%f32, %f31, %f10;
	fma.rn.ftz.f32 	%f37, %f32, %f32, %f30;
	add.s32 	%r39, %r39, 16;
	add.s32 	%r38, %r38, 4;
	setp.lt.s32	%p8, %r38, %r4;
	@%p8 bra 	BB22_12;

BB22_13:
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f37;

BB22_14:
	ret;
}

	// .globl	Constrain
.visible .entry Constrain(
	.param .u64 Constrain_param_0,
	.param .u32 Constrain_param_1,
	.param .f32 Constrain_param_2,
	.param .f32 Constrain_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd3, [Constrain_param_0];
	ld.param.u32 	%r6, [Constrain_param_1];
	ld.param.f32 	%f2, [Constrain_param_2];
	ld.param.f32 	%f3, [Constrain_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB23_7;

	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB23_2:
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd2, %rd1, %rd4;
	ld.global.f32 	%f1, [%rd2];
	setp.geu.ftz.f32	%p2, %f1, %f2;
	@%p2 bra 	BB23_4;

	st.global.f32 	[%rd2], %f2;

BB23_4:
	setp.leu.ftz.f32	%p3, %f1, %f3;
	@%p3 bra 	BB23_6;

	st.global.f32 	[%rd2], %f3;

BB23_6:
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p4, %r10, %r6;
	@%p4 bra 	BB23_2;

BB23_7:
	ret;
}

	// .globl	Pow
.visible .entry Pow(
	.param .u64 Pow_param_0,
	.param .u64 Pow_param_1,
	.param .u32 Pow_param_2,
	.param .f32 Pow_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Pow_param_0];
	ld.param.u64 	%rd4, [Pow_param_1];
	ld.param.u32 	%r6, [Pow_param_2];
	ld.param.f32 	%f1, [Pow_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB24_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB24_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	lg2.approx.ftz.f32 	%f3, %f2;
	mul.ftz.f32 	%f4, %f3, %f1;
	ex2.approx.ftz.f32 	%f5, %f4;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f5;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB24_2;

BB24_3:
	ret;
}

	// .globl	Diagonal
.visible .entry Diagonal(
	.param .u64 Diagonal_param_0,
	.param .u64 Diagonal_param_1,
	.param .u32 Diagonal_param_2,
	.param .u32 Diagonal_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [Diagonal_param_0];
	ld.param.u64 	%rd4, [Diagonal_param_1];
	ld.param.u32 	%r6, [Diagonal_param_2];
	ld.param.u32 	%r7, [Diagonal_param_3];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r12, %r8, %r1, %r9;
	setp.ge.s32	%p1, %r12, %r6;
	setp.ge.s32	%p2, %r12, %r7;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB25_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r10, %nctaid.x;
	mul.lo.s32 	%r3, %r10, %r1;

BB25_2:
	mad.lo.s32 	%r11, %r12, %r6, %r12;
	mul.wide.s32 	%rd5, %r11, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mul.wide.s32 	%rd7, %r12, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f1;
	add.s32 	%r12, %r3, %r12;
	setp.lt.s32	%p4, %r12, %r6;
	setp.lt.s32	%p5, %r12, %r7;
	and.pred  	%p6, %p4, %p5;
	@%p6 bra 	BB25_2;

BB25_3:
	ret;
}

	// .globl	L1Regularisation
.visible .entry L1Regularisation(
	.param .u64 L1Regularisation_param_0,
	.param .u32 L1Regularisation_param_1,
	.param .f32 L1Regularisation_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd3, [L1Regularisation_param_0];
	ld.param.u32 	%r8, [L1Regularisation_param_1];
	ld.param.f32 	%f2, [L1Regularisation_param_2];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r13, %r9, %r1, %r10;
	setp.ge.s32	%p1, %r13, %r8;
	@%p1 bra 	BB26_5;

	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r3, %r11, %r1;

BB26_2:
	mul.wide.s32 	%rd4, %r13, 4;
	add.s64 	%rd2, %rd1, %rd4;
	ld.global.f32 	%f1, [%rd2];
	setp.gt.ftz.f32	%p2, %f1, 0f00000000;
	mov.u32 	%r14, 1;
	@%p2 bra 	BB26_4;

	setp.lt.ftz.f32	%p3, %f1, 0f00000000;
	selp.b32	%r14, -1, 0, %p3;

BB26_4:
	cvt.rn.f32.s32	%f3, %r14;
	mul.ftz.f32 	%f4, %f3, %f2;
	sub.ftz.f32 	%f5, %f1, %f4;
	st.global.f32 	[%rd2], %f5;
	add.s32 	%r13, %r3, %r13;
	setp.lt.s32	%p4, %r13, %r8;
	@%p4 bra 	BB26_2;

BB26_5:
	ret;
}

	// .globl	PointwiseDivideRows
.visible .entry PointwiseDivideRows(
	.param .u64 PointwiseDivideRows_param_0,
	.param .u64 PointwiseDivideRows_param_1,
	.param .u32 PointwiseDivideRows_param_2,
	.param .u32 PointwiseDivideRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseDivideRows_param_0];
	ld.param.u64 	%rd4, [PointwiseDivideRows_param_1];
	ld.param.u32 	%r10, [PointwiseDivideRows_param_2];
	ld.param.u32 	%r11, [PointwiseDivideRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB27_6;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB27_2:
	setp.ge.s32	%p2, %r3, %r11;
	@%p2 bra 	BB27_5;

	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mov.u32 	%r21, %r3;

BB27_4:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd7, %r19, 4;
	add.s64 	%rd8, %rd2, %rd7;
	ld.global.f32 	%f2, [%rd8];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB27_4;

BB27_5:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB27_2;

BB27_6:
	ret;
}

	// .globl	PointwiseDivideColumns
.visible .entry PointwiseDivideColumns(
	.param .u64 PointwiseDivideColumns_param_0,
	.param .u64 PointwiseDivideColumns_param_1,
	.param .u32 PointwiseDivideColumns_param_2,
	.param .u32 PointwiseDivideColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [PointwiseDivideColumns_param_0];
	ld.param.u64 	%rd4, [PointwiseDivideColumns_param_1];
	ld.param.u32 	%r10, [PointwiseDivideColumns_param_2];
	ld.param.u32 	%r11, [PointwiseDivideColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB28_5;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB28_2:
	setp.ge.s32	%p2, %r3, %r11;
	mov.u32 	%r21, %r3;
	@%p2 bra 	BB28_4;

BB28_3:
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd5, %r19, 4;
	add.s64 	%rd6, %rd2, %rd5;
	mul.wide.s32 	%rd7, %r21, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd6], %f3;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB28_3;

BB28_4:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB28_2;

BB28_5:
	ret;
}

	// .globl	SplitRows
.visible .entry SplitRows(
	.param .u64 SplitRows_param_0,
	.param .u64 SplitRows_param_1,
	.param .u64 SplitRows_param_2,
	.param .u32 SplitRows_param_3,
	.param .u32 SplitRows_param_4,
	.param .u32 SplitRows_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [SplitRows_param_0];
	ld.param.u64 	%rd5, [SplitRows_param_1];
	ld.param.u64 	%rd6, [SplitRows_param_2];
	ld.param.u32 	%r11, [SplitRows_param_3];
	ld.param.u32 	%r12, [SplitRows_param_4];
	ld.param.u32 	%r13, [SplitRows_param_5];
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r23, %r14, %r1, %r15;
	setp.ge.s32	%p1, %r23, %r11;
	@%p1 bra 	BB29_8;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r3, %r17, %r16, %r18;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r4, %r19, %r1;
	mov.u32 	%r20, %nctaid.y;
	mul.lo.s32 	%r5, %r20, %r16;

BB29_2:
	setp.ge.s32	%p2, %r3, %r12;
	mov.u32 	%r24, %r3;
	@%p2 bra 	BB29_7;

BB29_3:
	mad.lo.s32 	%r8, %r24, %r11, %r23;
	mul.wide.s32 	%rd7, %r8, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	setp.lt.s32	%p3, %r24, %r13;
	@%p3 bra 	BB29_5;
	bra.uni 	BB29_4;

BB29_5:
	add.s64 	%rd12, %rd1, %rd7;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	BB29_6;

BB29_4:
	sub.s32 	%r21, %r24, %r13;
	mad.lo.s32 	%r22, %r21, %r11, %r23;
	mul.wide.s32 	%rd9, %r22, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f1;

BB29_6:
	add.s32 	%r24, %r5, %r24;
	setp.lt.s32	%p4, %r24, %r12;
	@%p4 bra 	BB29_3;

BB29_7:
	add.s32 	%r23, %r4, %r23;
	setp.lt.s32	%p5, %r23, %r11;
	@%p5 bra 	BB29_2;

BB29_8:
	ret;
}

	// .globl	SplitColumns
.visible .entry SplitColumns(
	.param .u64 SplitColumns_param_0,
	.param .u64 SplitColumns_param_1,
	.param .u64 SplitColumns_param_2,
	.param .u32 SplitColumns_param_3,
	.param .u32 SplitColumns_param_4,
	.param .u32 SplitColumns_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [SplitColumns_param_0];
	ld.param.u64 	%rd5, [SplitColumns_param_1];
	ld.param.u64 	%rd6, [SplitColumns_param_2];
	ld.param.u32 	%r12, [SplitColumns_param_3];
	ld.param.u32 	%r13, [SplitColumns_param_4];
	ld.param.u32 	%r14, [SplitColumns_param_5];
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r25, %r15, %r1, %r16;
	setp.ge.s32	%p1, %r25, %r12;
	@%p1 bra 	BB30_9;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.u32 	%r17, %ntid.y;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r3, %r18, %r17, %r19;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r20, %r1;
	mov.u32 	%r21, %nctaid.y;
	mul.lo.s32 	%r5, %r21, %r17;
	sub.s32 	%r6, %r12, %r14;

BB30_2:
	setp.ge.s32	%p2, %r3, %r13;
	@%p2 bra 	BB30_8;

	sub.s32 	%r8, %r25, %r14;
	mov.u32 	%r26, %r3;

BB30_4:
	mad.lo.s32 	%r22, %r26, %r12, %r25;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	setp.lt.s32	%p3, %r25, %r14;
	@%p3 bra 	BB30_6;
	bra.uni 	BB30_5;

BB30_6:
	mad.lo.s32 	%r24, %r26, %r14, %r25;
	mul.wide.s32 	%rd11, %r24, 4;
	add.s64 	%rd12, %rd1, %rd11;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	BB30_7;

BB30_5:
	mad.lo.s32 	%r23, %r26, %r6, %r8;
	mul.wide.s32 	%rd9, %r23, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f1;

BB30_7:
	add.s32 	%r26, %r5, %r26;
	setp.lt.s32	%p4, %r26, %r13;
	@%p4 bra 	BB30_4;

BB30_8:
	add.s32 	%r25, %r4, %r25;
	setp.lt.s32	%p5, %r25, %r12;
	@%p5 bra 	BB30_2;

BB30_9:
	ret;
}

	// .globl	ConcatColumns
.visible .entry ConcatColumns(
	.param .u64 ConcatColumns_param_0,
	.param .u64 ConcatColumns_param_1,
	.param .u64 ConcatColumns_param_2,
	.param .u32 ConcatColumns_param_3,
	.param .u32 ConcatColumns_param_4,
	.param .u32 ConcatColumns_param_5,
	.param .u32 ConcatColumns_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd7, [ConcatColumns_param_0];
	ld.param.u64 	%rd8, [ConcatColumns_param_1];
	ld.param.u64 	%rd9, [ConcatColumns_param_2];
	ld.param.u32 	%r11, [ConcatColumns_param_3];
	ld.param.u32 	%r12, [ConcatColumns_param_4];
	ld.param.u32 	%r13, [ConcatColumns_param_5];
	ld.param.u32 	%r14, [ConcatColumns_param_6];
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r25, %r15, %r1, %r16;
	setp.ge.s32	%p1, %r25, %r11;
	@%p1 bra 	BB31_9;

	cvta.to.global.u64 	%rd1, %rd9;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd8;
	mov.u32 	%r17, %ntid.y;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %tid.y;
	mad.lo.s32 	%r3, %r18, %r17, %r19;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r20, %r1;
	mov.u32 	%r21, %nctaid.y;
	mul.lo.s32 	%r5, %r21, %r17;

BB31_2:
	setp.ge.s32	%p2, %r3, %r12;
	@%p2 bra 	BB31_8;

	sub.s32 	%r7, %r25, %r13;
	mov.u32 	%r26, %r3;

BB31_4:
	setp.lt.s32	%p3, %r25, %r13;
	@%p3 bra 	BB31_6;
	bra.uni 	BB31_5;

BB31_6:
	mad.lo.s32 	%r23, %r26, %r13, %r25;
	mul.wide.s32 	%rd11, %r23, 4;
	add.s64 	%rd14, %rd2, %rd11;
	bra.uni 	BB31_7;

BB31_5:
	mad.lo.s32 	%r22, %r26, %r14, %r7;
	mul.wide.s32 	%rd10, %r22, 4;
	add.s64 	%rd14, %rd3, %rd10;

BB31_7:
	ld.global.nc.f32 	%f1, [%rd14];
	mad.lo.s32 	%r24, %r26, %r11, %r25;
	mul.wide.s32 	%rd12, %r24, 4;
	add.s64 	%rd13, %rd1, %rd12;
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r26, %r5, %r26;
	setp.lt.s32	%p4, %r26, %r12;
	@%p4 bra 	BB31_4;

BB31_8:
	add.s32 	%r25, %r4, %r25;
	setp.lt.s32	%p5, %r25, %r11;
	@%p5 bra 	BB31_2;

BB31_9:
	ret;
}

	// .globl	ConcatRows
.visible .entry ConcatRows(
	.param .u64 ConcatRows_param_0,
	.param .u64 ConcatRows_param_1,
	.param .u64 ConcatRows_param_2,
	.param .u32 ConcatRows_param_3,
	.param .u32 ConcatRows_param_4,
	.param .u32 ConcatRows_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd7, [ConcatRows_param_0];
	ld.param.u64 	%rd8, [ConcatRows_param_1];
	ld.param.u64 	%rd9, [ConcatRows_param_2];
	ld.param.u32 	%r11, [ConcatRows_param_3];
	ld.param.u32 	%r12, [ConcatRows_param_4];
	ld.param.u32 	%r13, [ConcatRows_param_5];
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r23, %r14, %r1, %r15;
	setp.ge.s32	%p1, %r23, %r11;
	@%p1 bra 	BB32_8;

	cvta.to.global.u64 	%rd1, %rd9;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd8;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r3, %r17, %r16, %r18;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r4, %r19, %r1;
	mov.u32 	%r20, %nctaid.y;
	mul.lo.s32 	%r5, %r20, %r16;

BB32_2:
	setp.ge.s32	%p2, %r3, %r12;
	mov.u32 	%r24, %r3;
	@%p2 bra 	BB32_7;

BB32_3:
	mad.lo.s32 	%r8, %r24, %r11, %r23;
	setp.lt.s32	%p3, %r24, %r13;
	@%p3 bra 	BB32_5;
	bra.uni 	BB32_4;

BB32_5:
	mul.wide.s32 	%rd11, %r8, 4;
	add.s64 	%rd14, %rd2, %rd11;
	bra.uni 	BB32_6;

BB32_4:
	sub.s32 	%r21, %r24, %r13;
	mad.lo.s32 	%r22, %r21, %r11, %r23;
	mul.wide.s32 	%rd10, %r22, 4;
	add.s64 	%rd14, %rd3, %rd10;

BB32_6:
	ld.global.nc.f32 	%f1, [%rd14];
	mul.wide.s32 	%rd12, %r8, 4;
	add.s64 	%rd13, %rd1, %rd12;
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r24, %r5, %r24;
	setp.lt.s32	%p4, %r24, %r12;
	@%p4 bra 	BB32_3;

BB32_7:
	add.s32 	%r23, %r4, %r23;
	setp.lt.s32	%p5, %r23, %r11;
	@%p5 bra 	BB32_2;

BB32_8:
	ret;
}

	// .globl	EuclideanDistance
.visible .entry EuclideanDistance(
	.param .u64 EuclideanDistance_param_0,
	.param .u64 EuclideanDistance_param_1,
	.param .u64 EuclideanDistance_param_2,
	.param .u32 EuclideanDistance_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [EuclideanDistance_param_0];
	ld.param.u64 	%rd5, [EuclideanDistance_param_1];
	ld.param.u64 	%rd6, [EuclideanDistance_param_2];
	ld.param.u32 	%r6, [EuclideanDistance_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB33_3;

	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB33_2:
	mul.wide.s32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd3, %rd7;
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd9];
	ld.global.nc.f32 	%f2, [%rd8];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	add.s64 	%rd10, %rd1, %rd7;
	st.global.f32 	[%rd10], %f4;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB33_2;

BB33_3:
	ret;
}

	// .globl	ManhattanDistance
.visible .entry ManhattanDistance(
	.param .u64 ManhattanDistance_param_0,
	.param .u64 ManhattanDistance_param_1,
	.param .u64 ManhattanDistance_param_2,
	.param .u32 ManhattanDistance_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [ManhattanDistance_param_0];
	ld.param.u64 	%rd5, [ManhattanDistance_param_1];
	ld.param.u64 	%rd6, [ManhattanDistance_param_2];
	ld.param.u32 	%r6, [ManhattanDistance_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB34_3;

	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB34_2:
	mul.wide.s32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd3, %rd7;
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd9];
	ld.global.nc.f32 	%f2, [%rd8];
	sub.ftz.f32 	%f3, %f2, %f1;
	cvt.ftz.f64.f32	%fd1, %f3;
	abs.f64 	%fd2, %fd1;
	cvt.rn.ftz.f32.f64	%f4, %fd2;
	add.s64 	%rd10, %rd1, %rd7;
	st.global.f32 	[%rd10], %f4;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB34_2;

BB34_3:
	ret;
}

	// .globl	CosineDistance
.visible .entry CosineDistance(
	.param .u64 CosineDistance_param_0,
	.param .u64 CosineDistance_param_1,
	.param .u64 CosineDistance_param_2,
	.param .u64 CosineDistance_param_3,
	.param .u64 CosineDistance_param_4,
	.param .u32 CosineDistance_param_5
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd6, [CosineDistance_param_0];
	ld.param.u64 	%rd7, [CosineDistance_param_1];
	ld.param.u64 	%rd8, [CosineDistance_param_2];
	ld.param.u64 	%rd9, [CosineDistance_param_3];
	ld.param.u64 	%rd10, [CosineDistance_param_4];
	ld.param.u32 	%r6, [CosineDistance_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB35_3;

	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd6;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;
	cvta.to.global.u64 	%rd3, %rd8;
	cvta.to.global.u64 	%rd4, %rd9;
	cvta.to.global.u64 	%rd5, %rd10;

BB35_2:
	mul.wide.s32 	%rd11, %r10, 4;
	add.s64 	%rd12, %rd2, %rd11;
	add.s64 	%rd13, %rd1, %rd11;
	ld.global.nc.f32 	%f1, [%rd13];
	ld.global.nc.f32 	%f2, [%rd12];
	mul.ftz.f32 	%f3, %f2, %f2;
	atom.global.add.f32 	%f4, [%rd3], %f3;
	mul.ftz.f32 	%f5, %f2, %f1;
	atom.global.add.f32 	%f6, [%rd4], %f5;
	mul.ftz.f32 	%f7, %f1, %f1;
	atom.global.add.f32 	%f8, [%rd5], %f7;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB35_2;

BB35_3:
	ret;
}

	// .globl	Abs
.visible .entry Abs(
	.param .u64 Abs_param_0,
	.param .u64 Abs_param_1,
	.param .u32 Abs_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Abs_param_0];
	ld.param.u64 	%rd4, [Abs_param_1];
	ld.param.u32 	%r6, [Abs_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB36_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB36_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	cvt.ftz.f64.f32	%fd1, %f1;
	abs.f64 	%fd2, %fd1;
	cvt.rn.ftz.f32.f64	%f2, %fd2;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f2;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB36_2;

BB36_3:
	ret;
}

	// .globl	Log
.visible .entry Log(
	.param .u64 Log_param_0,
	.param .u64 Log_param_1,
	.param .u32 Log_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [Log_param_0];
	ld.param.u64 	%rd4, [Log_param_1];
	ld.param.u32 	%r6, [Log_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB37_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB37_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	lg2.approx.ftz.f32 	%f2, %f1;
	mul.ftz.f32 	%f3, %f2, 0f3F317218;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f3;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB37_2;

BB37_3:
	ret;
}

	// .globl	Normalise
.visible .entry Normalise(
	.param .u64 Normalise_param_0,
	.param .u32 Normalise_param_1,
	.param .f32 Normalise_param_2,
	.param .f32 Normalise_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [Normalise_param_0];
	ld.param.u32 	%r6, [Normalise_param_1];
	ld.param.f32 	%f1, [Normalise_param_2];
	ld.param.f32 	%f2, [Normalise_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB38_3;

	cvta.to.global.u64 	%rd1, %rd2;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB38_2:
	mul.wide.s32 	%rd3, %r10, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f3, [%rd4];
	sub.ftz.f32 	%f4, %f3, %f1;
	div.approx.ftz.f32 	%f5, %f4, %f2;
	st.global.f32 	[%rd4], %f5;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB38_2;

BB38_3:
	ret;
}

	// .globl	SoftmaxVector
.visible .entry SoftmaxVector(
	.param .u64 SoftmaxVector_param_0,
	.param .u64 SoftmaxVector_param_1,
	.param .u32 SoftmaxVector_param_2,
	.param .f32 SoftmaxVector_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd3, [SoftmaxVector_param_0];
	ld.param.u64 	%rd4, [SoftmaxVector_param_1];
	ld.param.u32 	%r6, [SoftmaxVector_param_2];
	ld.param.f32 	%f1, [SoftmaxVector_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB39_3;

	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB39_2:
	mul.wide.s32 	%rd5, %r10, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f5, %f4;
	add.s64 	%rd7, %rd1, %rd5;
	st.global.f32 	[%rd7], %f5;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB39_2;

BB39_3:
	ret;
}

	// .globl	VectorAdd
.visible .entry VectorAdd(
	.param .u64 VectorAdd_param_0,
	.param .u32 VectorAdd_param_1,
	.param .f32 VectorAdd_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [VectorAdd_param_0];
	ld.param.u32 	%r6, [VectorAdd_param_1];
	ld.param.f32 	%f1, [VectorAdd_param_2];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r10, %r6;
	@%p1 bra 	BB40_3;

	cvta.to.global.u64 	%rd1, %rd2;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB40_2:
	mul.wide.s32 	%rd3, %r10, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f2, [%rd4];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;
	add.s32 	%r10, %r3, %r10;
	setp.lt.s32	%p2, %r10, %r6;
	@%p2 bra 	BB40_2;

BB40_3:
	ret;
}

	// .globl	VectorCopyRandom
.visible .entry VectorCopyRandom(
	.param .u64 VectorCopyRandom_param_0,
	.param .u64 VectorCopyRandom_param_1,
	.param .u64 VectorCopyRandom_param_2,
	.param .u32 VectorCopyRandom_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [VectorCopyRandom_param_0];
	ld.param.u64 	%rd5, [VectorCopyRandom_param_1];
	ld.param.u64 	%rd6, [VectorCopyRandom_param_2];
	ld.param.u32 	%r6, [VectorCopyRandom_param_3];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r11, %r7, %r1, %r8;
	setp.ge.s32	%p1, %r11, %r6;
	@%p1 bra 	BB41_3;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	cvta.to.global.u64 	%rd3, %rd6;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;

BB41_2:
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.nc.u32 	%r10, [%rd8];
	mul.wide.s32 	%rd9, %r10, 4;
	add.s64 	%rd10, %rd2, %rd9;
	add.s64 	%rd11, %rd1, %rd7;
	ld.global.f32 	%f1, [%rd11];
	ld.global.nc.f32 	%f2, [%rd10];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd11], %f3;
	add.s32 	%r11, %r3, %r11;
	setp.lt.s32	%p2, %r11, %r6;
	@%p2 bra 	BB41_2;

BB41_3:
	ret;
}

	// .globl	CopyToMatrixRows
.visible .entry CopyToMatrixRows(
	.param .u64 CopyToMatrixRows_param_0,
	.param .u64 CopyToMatrixRows_param_1,
	.param .u32 CopyToMatrixRows_param_2,
	.param .u32 CopyToMatrixRows_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd4, [CopyToMatrixRows_param_0];
	ld.param.u64 	%rd5, [CopyToMatrixRows_param_1];
	ld.param.u32 	%r10, [CopyToMatrixRows_param_2];
	ld.param.u32 	%r11, [CopyToMatrixRows_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB42_6;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB42_2:
	setp.ge.s32	%p2, %r3, %r11;
	@%p2 bra 	BB42_5;

	mul.wide.s32 	%rd6, %r20, 8;
	add.s64 	%rd7, %rd2, %rd6;
	ld.global.nc.u64 	%rd8, [%rd7];
	cvta.to.global.u64 	%rd3, %rd8;
	mov.u32 	%r21, %r3;

BB42_4:
	mul.wide.s32 	%rd9, %r21, 4;
	add.s64 	%rd10, %rd3, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd11, %r19, 4;
	add.s64 	%rd12, %rd1, %rd11;
	st.global.f32 	[%rd12], %f1;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB42_4;

BB42_5:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB42_2;

BB42_6:
	ret;
}

	// .globl	CopyToMatrixColumns
.visible .entry CopyToMatrixColumns(
	.param .u64 CopyToMatrixColumns_param_0,
	.param .u64 CopyToMatrixColumns_param_1,
	.param .u32 CopyToMatrixColumns_param_2,
	.param .u32 CopyToMatrixColumns_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd4, [CopyToMatrixColumns_param_0];
	ld.param.u64 	%rd5, [CopyToMatrixColumns_param_1];
	ld.param.u32 	%r10, [CopyToMatrixColumns_param_2];
	ld.param.u32 	%r11, [CopyToMatrixColumns_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r20, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r20, %r10;
	@%p1 bra 	BB43_6;

	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB43_2:
	setp.ge.s32	%p2, %r3, %r11;
	@%p2 bra 	BB43_5;

	cvt.s64.s32	%rd3, %r20;
	mov.u32 	%r21, %r3;

BB43_4:
	mul.wide.s32 	%rd6, %r21, 8;
	add.s64 	%rd7, %rd2, %rd6;
	ld.global.nc.u64 	%rd8, [%rd7];
	cvta.to.global.u64 	%rd9, %rd8;
	shl.b64 	%rd10, %rd3, 2;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f1, [%rd11];
	mad.lo.s32 	%r19, %r21, %r10, %r20;
	mul.wide.s32 	%rd12, %r19, 4;
	add.s64 	%rd13, %rd1, %rd12;
	st.global.f32 	[%rd13], %f1;
	add.s32 	%r21, %r5, %r21;
	setp.lt.s32	%p3, %r21, %r11;
	@%p3 bra 	BB43_4;

BB43_5:
	add.s32 	%r20, %r4, %r20;
	setp.lt.s32	%p4, %r20, %r10;
	@%p4 bra 	BB43_2;

BB43_6:
	ret;
}

	// .globl	TensorAddPadding
.visible .entry TensorAddPadding(
	.param .u32 TensorAddPadding_param_0,
	.param .u64 TensorAddPadding_param_1,
	.param .u64 TensorAddPadding_param_2,
	.param .u32 TensorAddPadding_param_3,
	.param .u32 TensorAddPadding_param_4,
	.param .u32 TensorAddPadding_param_5,
	.param .u32 TensorAddPadding_param_6,
	.param .u32 TensorAddPadding_param_7,
	.param .u32 TensorAddPadding_param_8,
	.param .u32 TensorAddPadding_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<37>;
	.reg .b64 	%rd<9>;


	ld.param.u32 	%r8, [TensorAddPadding_param_0];
	ld.param.u64 	%rd1, [TensorAddPadding_param_1];
	ld.param.u64 	%rd2, [TensorAddPadding_param_2];
	ld.param.u32 	%r9, [TensorAddPadding_param_3];
	ld.param.u32 	%r10, [TensorAddPadding_param_4];
	ld.param.u32 	%r11, [TensorAddPadding_param_5];
	ld.param.u32 	%r12, [TensorAddPadding_param_7];
	ld.param.u32 	%r13, [TensorAddPadding_param_8];
	ld.param.u32 	%r14, [TensorAddPadding_param_9];
	mov.u32 	%r15, %ntid.x;
	mov.u32 	%r16, %ctaid.x;
	mov.u32 	%r17, %tid.x;
	mad.lo.s32 	%r36, %r16, %r15, %r17;
	setp.ge.s32	%p1, %r36, %r8;
	@%p1 bra 	BB44_5;

	mul.lo.s32 	%r22, %r10, %r9;
	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd6, %rd2;

BB44_2:
	div.s32 	%r18, %r36, %r12;
	rem.s32 	%r3, %r18, %r13;
	div.s32 	%r19, %r18, %r13;
	rem.s32 	%r4, %r19, %r11;
	div.s32 	%r5, %r19, %r11;
	sub.s32 	%r20, %r12, %r14;
	rem.s32 	%r6, %r36, %r12;
	setp.ge.s32	%p2, %r6, %r20;
	setp.lt.s32	%p3, %r6, %r14;
	or.pred  	%p4, %p2, %p3;
	setp.lt.s32	%p5, %r3, %r14;
	or.pred  	%p6, %p4, %p5;
	sub.s32 	%r21, %r13, %r14;
	setp.ge.s32	%p7, %r3, %r21;
	mov.f32 	%f4, 0f00000000;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	BB44_4;

	mul.lo.s32 	%r23, %r22, %r11;
	sub.s32 	%r24, %r3, %r14;
	sub.s32 	%r25, %r6, %r14;
	mad.lo.s32 	%r26, %r24, %r9, %r25;
	mad.lo.s32 	%r27, %r4, %r22, %r26;
	mad.lo.s32 	%r28, %r23, %r5, %r27;
	mul.wide.s32 	%rd4, %r28, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f4, [%rd5];

BB44_4:
	mul.lo.s32 	%r29, %r13, %r12;
	mul.lo.s32 	%r30, %r29, %r11;
	mad.lo.s32 	%r31, %r3, %r12, %r6;
	mad.lo.s32 	%r32, %r4, %r29, %r31;
	mad.lo.s32 	%r33, %r30, %r5, %r32;
	mul.wide.s32 	%rd7, %r33, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f4;
	mov.u32 	%r35, %nctaid.x;
	mad.lo.s32 	%r36, %r35, %r15, %r36;
	setp.lt.s32	%p9, %r36, %r8;
	@%p9 bra 	BB44_2;

BB44_5:
	ret;
}

	// .globl	TensorRemovePadding
.visible .entry TensorRemovePadding(
	.param .u32 TensorRemovePadding_param_0,
	.param .u64 TensorRemovePadding_param_1,
	.param .u64 TensorRemovePadding_param_2,
	.param .u32 TensorRemovePadding_param_3,
	.param .u32 TensorRemovePadding_param_4,
	.param .u32 TensorRemovePadding_param_5,
	.param .u32 TensorRemovePadding_param_6,
	.param .u32 TensorRemovePadding_param_7,
	.param .u32 TensorRemovePadding_param_8,
	.param .u32 TensorRemovePadding_param_9
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<38>;
	.reg .b64 	%rd<9>;


	ld.param.u32 	%r10, [TensorRemovePadding_param_0];
	ld.param.u64 	%rd1, [TensorRemovePadding_param_1];
	ld.param.u64 	%rd2, [TensorRemovePadding_param_2];
	ld.param.u32 	%r11, [TensorRemovePadding_param_3];
	ld.param.u32 	%r12, [TensorRemovePadding_param_4];
	ld.param.u32 	%r13, [TensorRemovePadding_param_5];
	ld.param.u32 	%r14, [TensorRemovePadding_param_7];
	ld.param.u32 	%r15, [TensorRemovePadding_param_8];
	ld.param.u32 	%r16, [TensorRemovePadding_param_9];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r18, %tid.x;
	mad.lo.s32 	%r37, %r17, %r1, %r18;
	setp.ge.s32	%p1, %r37, %r10;
	@%p1 bra 	BB45_5;

	mul.lo.s32 	%r19, %r15, %r14;
	mul.lo.s32 	%r3, %r19, %r13;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r4, %r20, %r1;
	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd6, %rd2;

BB45_2:
	div.s32 	%r6, %r37, %r11;
	rem.s32 	%r7, %r6, %r12;
	sub.s32 	%r21, %r11, %r16;
	rem.s32 	%r8, %r37, %r11;
	setp.ge.s32	%p2, %r8, %r21;
	setp.lt.s32	%p3, %r8, %r16;
	or.pred  	%p4, %p2, %p3;
	setp.lt.s32	%p5, %r7, %r16;
	or.pred  	%p6, %p4, %p5;
	sub.s32 	%r22, %r12, %r16;
	setp.ge.s32	%p7, %r7, %r22;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	BB45_4;

	div.s32 	%r23, %r6, %r12;
	rem.s32 	%r24, %r23, %r13;
	div.s32 	%r25, %r23, %r13;
	mul.lo.s32 	%r26, %r12, %r11;
	mul.lo.s32 	%r27, %r26, %r13;
	mad.lo.s32 	%r28, %r7, %r11, %r8;
	mad.lo.s32 	%r29, %r24, %r26, %r28;
	mad.lo.s32 	%r30, %r27, %r25, %r29;
	mul.wide.s32 	%rd4, %r30, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	sub.s32 	%r32, %r7, %r16;
	sub.s32 	%r33, %r8, %r16;
	mad.lo.s32 	%r34, %r32, %r14, %r33;
	mad.lo.s32 	%r35, %r24, %r19, %r34;
	mad.lo.s32 	%r36, %r3, %r25, %r35;
	mul.wide.s32 	%rd7, %r36, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB45_4:
	add.s32 	%r37, %r4, %r37;
	setp.lt.s32	%p9, %r37, %r10;
	@%p9 bra 	BB45_2;

BB45_5:
	ret;
}

	// .globl	TensorIm2Col
.visible .entry TensorIm2Col(
	.param .u32 TensorIm2Col_param_0,
	.param .u64 TensorIm2Col_param_1,
	.param .u64 TensorIm2Col_param_2,
	.param .u64 TensorIm2Col_param_3,
	.param .u64 TensorIm2Col_param_4,
	.param .u32 TensorIm2Col_param_5,
	.param .u32 TensorIm2Col_param_6,
	.param .u32 TensorIm2Col_param_7,
	.param .u32 TensorIm2Col_param_8,
	.param .u32 TensorIm2Col_param_9,
	.param .u32 TensorIm2Col_param_10,
	.param .u32 TensorIm2Col_param_11,
	.param .u32 TensorIm2Col_param_12,
	.param .u32 TensorIm2Col_param_13,
	.param .u32 TensorIm2Col_param_14,
	.param .u32 TensorIm2Col_param_15
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<43>;
	.reg .b64 	%rd<16>;


	ld.param.u32 	%r8, [TensorIm2Col_param_0];
	ld.param.u64 	%rd2, [TensorIm2Col_param_1];
	ld.param.u64 	%rd3, [TensorIm2Col_param_2];
	ld.param.u64 	%rd4, [TensorIm2Col_param_3];
	ld.param.u64 	%rd5, [TensorIm2Col_param_4];
	ld.param.u32 	%r9, [TensorIm2Col_param_5];
	ld.param.u32 	%r10, [TensorIm2Col_param_6];
	ld.param.u32 	%r11, [TensorIm2Col_param_7];
	ld.param.u32 	%r12, [TensorIm2Col_param_9];
	ld.param.u32 	%r13, [TensorIm2Col_param_10];
	ld.param.u32 	%r14, [TensorIm2Col_param_11];
	ld.param.u32 	%r15, [TensorIm2Col_param_12];
	ld.param.u32 	%r16, [TensorIm2Col_param_13];
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r18, %ntid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r42, %r17, %r18, %r19;
	setp.ge.s32	%p1, %r42, %r8;
	@%p1 bra 	BB46_3;

	cvta.to.global.u64 	%rd1, %rd3;
	mul.lo.s32 	%r2, %r13, %r12;
	mul.lo.s32 	%r3, %r10, %r9;
	mul.lo.s32 	%r4, %r3, %r11;
	mov.u32 	%r21, %nctaid.x;
	mul.lo.s32 	%r5, %r21, %r18;
	cvta.to.global.u64 	%rd6, %rd4;
	cvta.to.global.u64 	%rd9, %rd5;
	cvta.to.global.u64 	%rd11, %rd2;

BB46_2:
	div.s32 	%r22, %r42, %r15;
	rem.s32 	%r23, %r22, %r16;
	div.s32 	%r24, %r22, %r16;
	rem.s32 	%r25, %r24, %r11;
	div.s32 	%r26, %r24, %r11;
	rem.s32 	%r27, %r26, %r14;
	div.s32 	%r28, %r26, %r14;
	mul.wide.s32 	%rd7, %r27, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	cvt.rzi.ftz.s32.f32	%r29, %f1;
	add.s64 	%rd10, %rd9, %rd7;
	ld.global.nc.f32 	%f2, [%rd10];
	cvt.rzi.ftz.s32.f32	%r30, %f2;
	rem.s32 	%r31, %r42, %r15;
	mad.lo.s32 	%r32, %r25, %r15, %r31;
	mad.lo.s32 	%r33, %r32, %r16, %r23;
	mul.lo.s32 	%r34, %r25, %r3;
	mad.lo.s32 	%r35, %r4, %r28, %r34;
	add.s32 	%r36, %r29, %r31;
	add.s32 	%r37, %r30, %r23;
	mad.lo.s32 	%r38, %r36, %r9, %r37;
	add.s32 	%r39, %r35, %r38;
	mul.wide.s32 	%rd12, %r39, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.nc.f32 	%f3, [%rd13];
	mad.lo.s32 	%r40, %r33, %r12, %r27;
	mad.lo.s32 	%r41, %r2, %r28, %r40;
	mul.wide.s32 	%rd14, %r41, 4;
	add.s64 	%rd15, %rd1, %rd14;
	st.global.f32 	[%rd15], %f3;
	add.s32 	%r42, %r5, %r42;
	setp.lt.s32	%p2, %r42, %r8;
	@%p2 bra 	BB46_2;

BB46_3:
	ret;
}

	// .globl	TensorReverseIm2Col
.visible .entry TensorReverseIm2Col(
	.param .u32 TensorReverseIm2Col_param_0,
	.param .u64 TensorReverseIm2Col_param_1,
	.param .u64 TensorReverseIm2Col_param_2,
	.param .u64 TensorReverseIm2Col_param_3,
	.param .u64 TensorReverseIm2Col_param_4,
	.param .u64 TensorReverseIm2Col_param_5,
	.param .u32 TensorReverseIm2Col_param_6,
	.param .u32 TensorReverseIm2Col_param_7,
	.param .u32 TensorReverseIm2Col_param_8,
	.param .u32 TensorReverseIm2Col_param_9,
	.param .u32 TensorReverseIm2Col_param_10,
	.param .u32 TensorReverseIm2Col_param_11,
	.param .u32 TensorReverseIm2Col_param_12,
	.param .u32 TensorReverseIm2Col_param_13,
	.param .u32 TensorReverseIm2Col_param_14,
	.param .u32 TensorReverseIm2Col_param_15,
	.param .u32 TensorReverseIm2Col_param_16,
	.param .u32 TensorReverseIm2Col_param_17
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<59>;
	.reg .b64 	%rd<20>;


	ld.param.u32 	%r21, [TensorReverseIm2Col_param_0];
	ld.param.u64 	%rd6, [TensorReverseIm2Col_param_1];
	ld.param.u64 	%rd7, [TensorReverseIm2Col_param_2];
	ld.param.u64 	%rd8, [TensorReverseIm2Col_param_3];
	ld.param.u64 	%rd9, [TensorReverseIm2Col_param_4];
	ld.param.u64 	%rd10, [TensorReverseIm2Col_param_5];
	ld.param.u32 	%r22, [TensorReverseIm2Col_param_6];
	ld.param.u32 	%r23, [TensorReverseIm2Col_param_7];
	ld.param.u32 	%r24, [TensorReverseIm2Col_param_8];
	ld.param.u32 	%r25, [TensorReverseIm2Col_param_10];
	ld.param.u32 	%r26, [TensorReverseIm2Col_param_11];
	ld.param.u32 	%r27, [TensorReverseIm2Col_param_12];
	ld.param.u32 	%r28, [TensorReverseIm2Col_param_13];
	ld.param.u32 	%r29, [TensorReverseIm2Col_param_14];
	ld.param.u32 	%r30, [TensorReverseIm2Col_param_15];
	ld.param.u32 	%r31, [TensorReverseIm2Col_param_16];
	ld.param.u32 	%r32, [TensorReverseIm2Col_param_17];
	mov.u32 	%r33, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r34, %tid.x;
	mad.lo.s32 	%r58, %r33, %r1, %r34;
	setp.ge.s32	%p1, %r58, %r21;
	@%p1 bra 	BB47_5;

	cvta.to.global.u64 	%rd1, %rd8;
	cvta.to.global.u64 	%rd2, %rd7;
	cvta.to.global.u64 	%rd3, %rd6;
	cvta.to.global.u64 	%rd4, %rd10;
	cvta.to.global.u64 	%rd5, %rd9;
	mul.lo.s32 	%r3, %r23, %r22;
	mul.lo.s32 	%r4, %r3, %r24;
	mul.lo.s32 	%r5, %r27, %r26;
	mul.lo.s32 	%r6, %r5, %r32;
	mul.lo.s32 	%r7, %r31, %r30;
	mul.lo.s32 	%r8, %r7, %r32;
	add.s32 	%r9, %r26, -1;
	add.s32 	%r10, %r27, -1;
	mov.u32 	%r35, %nctaid.x;
	mul.lo.s32 	%r11, %r35, %r1;

BB47_2:
	div.s32 	%r13, %r58, %r32;
	div.s32 	%r14, %r13, %r26;
	div.s32 	%r15, %r14, %r27;
	rem.s32 	%r36, %r15, %r25;
	mul.wide.s32 	%rd11, %r36, 4;
	add.s64 	%rd12, %rd5, %rd11;
	ld.global.nc.f32 	%f1, [%rd12];
	cvt.rzi.ftz.s32.f32	%r16, %f1;
	add.s64 	%rd13, %rd4, %rd11;
	ld.global.nc.f32 	%f2, [%rd13];
	cvt.rzi.ftz.s32.f32	%r17, %f2;
	div.s32 	%r18, %r16, %r28;
	div.s32 	%r19, %r17, %r29;
	setp.ge.s32	%p2, %r18, %r23;
	setp.ge.s32	%p3, %r19, %r22;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB47_4;

	rem.s32 	%r37, %r13, %r26;
	rem.s32 	%r38, %r14, %r27;
	div.s32 	%r39, %r15, %r25;
	rem.s32 	%r40, %r39, %r24;
	div.s32 	%r41, %r39, %r24;
	mul.lo.s32 	%r42, %r3, %r40;
	rem.s32 	%r43, %r58, %r32;
	mul.lo.s32 	%r44, %r7, %r43;
	mad.lo.s32 	%r45, %r18, %r22, %r19;
	mad.lo.s32 	%r46, %r4, %r41, %r42;
	add.s32 	%r47, %r46, %r45;
	mul.wide.s32 	%rd14, %r47, 4;
	add.s64 	%rd15, %rd3, %rd14;
	sub.s32 	%r48, %r9, %r37;
	sub.s32 	%r49, %r10, %r38;
	mad.lo.s32 	%r50, %r48, %r27, %r49;
	add.s32 	%r51, %r16, %r37;
	add.s32 	%r52, %r17, %r38;
	mad.lo.s32 	%r53, %r51, %r30, %r52;
	mad.lo.s32 	%r54, %r5, %r43, %r50;
	mad.lo.s32 	%r55, %r6, %r40, %r54;
	mul.wide.s32 	%rd16, %r55, 4;
	add.s64 	%rd17, %rd2, %rd16;
	ld.global.nc.f32 	%f3, [%rd17];
	ld.global.nc.f32 	%f4, [%rd15];
	mul.ftz.f32 	%f5, %f4, %f3;
	mad.lo.s32 	%r56, %r8, %r41, %r44;
	add.s32 	%r57, %r56, %r53;
	mul.wide.s32 	%rd18, %r57, 4;
	add.s64 	%rd19, %rd1, %rd18;
	atom.global.add.f32 	%f6, [%rd19], %f5;

BB47_4:
	add.s32 	%r58, %r11, %r58;
	setp.lt.s32	%p5, %r58, %r21;
	@%p5 bra 	BB47_2;

BB47_5:
	ret;
}

	// .globl	SoftmaxDerivative
.visible .entry SoftmaxDerivative(
	.param .u64 SoftmaxDerivative_param_0,
	.param .u64 SoftmaxDerivative_param_1,
	.param .u32 SoftmaxDerivative_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<21>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [SoftmaxDerivative_param_0];
	ld.param.u64 	%rd3, [SoftmaxDerivative_param_1];
	ld.param.u32 	%r11, [SoftmaxDerivative_param_2];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r19, %r12, %r1, %r13;
	setp.ge.s32	%p1, %r19, %r11;
	@%p1 bra 	BB48_8;

	cvta.to.global.u64 	%rd2, %rd3;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r4, %r17, %r1;
	mov.u32 	%r18, %nctaid.y;
	mul.lo.s32 	%r5, %r18, %r14;

BB48_2:
	setp.ge.s32	%p2, %r3, %r11;
	@%p2 bra 	BB48_7;

	mul.wide.s32 	%rd5, %r19, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	mov.f32 	%f5, 0f3F800000;
	sub.ftz.f32 	%f6, %f5, %f1;
	mul.ftz.f32 	%f2, %f1, %f6;
	mov.u32 	%r20, %r3;

BB48_4:
	mad.lo.s32 	%r8, %r20, %r11, %r19;
	setp.eq.s32	%p3, %r19, %r20;
	mov.f32 	%f9, %f2;
	@%p3 bra 	BB48_6;

	mul.wide.s32 	%rd7, %r20, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f7, [%rd8];
	mul.ftz.f32 	%f8, %f1, %f7;
	neg.ftz.f32 	%f9, %f8;

BB48_6:
	mul.wide.s32 	%rd9, %r8, 4;
	add.s64 	%rd10, %rd2, %rd9;
	st.global.f32 	[%rd10], %f9;
	add.s32 	%r20, %r5, %r20;
	setp.lt.s32	%p4, %r20, %r11;
	@%p4 bra 	BB48_4;

BB48_7:
	add.s32 	%r19, %r4, %r19;
	setp.lt.s32	%p5, %r19, %r11;
	@%p5 bra 	BB48_2;

BB48_8:
	ret;
}

	// .globl	RotateInPlace
.visible .entry RotateInPlace(
	.param .u64 RotateInPlace_param_0,
	.param .u32 RotateInPlace_param_1,
	.param .u32 RotateInPlace_param_2,
	.param .u32 RotateInPlace_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd2, [RotateInPlace_param_0];
	ld.param.u32 	%r7, [RotateInPlace_param_1];
	ld.param.u32 	%r8, [RotateInPlace_param_3];
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r16, %r9, %r1, %r10;
	setp.ge.s32	%p1, %r16, %r7;
	@%p1 bra 	BB49_3;

	cvta.to.global.u64 	%rd1, %rd2;
	add.s32 	%r3, %r8, -1;
	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r4, %r11, %r1;

BB49_2:
	rem.s32 	%r12, %r16, %r8;
	sub.s32 	%r13, %r16, %r12;
	sub.s32 	%r14, %r3, %r12;
	add.s32 	%r15, %r14, %r13;
	mul.wide.s32 	%rd3, %r15, 4;
	add.s64 	%rd4, %rd1, %rd3;
	ld.global.f32 	%f1, [%rd4];
	mul.wide.s32 	%rd5, %r16, 4;
	add.s64 	%rd6, %rd1, %rd5;
	ld.global.f32 	%f2, [%rd6];
	st.global.f32 	[%rd4], %f2;
	st.global.f32 	[%rd6], %f1;
	add.s32 	%r16, %r4, %r16;
	setp.lt.s32	%p2, %r16, %r7;
	@%p2 bra 	BB49_2;

BB49_3:
	ret;
}

	// .globl	TensorMaxPool
.visible .entry TensorMaxPool(
	.param .u32 TensorMaxPool_param_0,
	.param .u64 TensorMaxPool_param_1,
	.param .u64 TensorMaxPool_param_2,
	.param .u64 TensorMaxPool_param_3,
	.param .u64 TensorMaxPool_param_4,
	.param .u64 TensorMaxPool_param_5,
	.param .u32 TensorMaxPool_param_6,
	.param .u32 TensorMaxPool_param_7,
	.param .u32 TensorMaxPool_param_8,
	.param .u32 TensorMaxPool_param_9,
	.param .u32 TensorMaxPool_param_10,
	.param .u32 TensorMaxPool_param_11,
	.param .u32 TensorMaxPool_param_12,
	.param .u32 TensorMaxPool_param_13,
	.param .u32 TensorMaxPool_param_14,
	.param .u32 TensorMaxPool_param_15,
	.param .u32 TensorMaxPool_param_16,
	.param .u32 TensorMaxPool_param_17
)
{
	.reg .pred 	%p<63>;
	.reg .f32 	%f<72>;
	.reg .b32 	%r<213>;
	.reg .b64 	%rd<48>;


	ld.param.u32 	%r92, [TensorMaxPool_param_0];
	ld.param.u64 	%rd15, [TensorMaxPool_param_1];
	ld.param.u64 	%rd16, [TensorMaxPool_param_2];
	ld.param.u64 	%rd14, [TensorMaxPool_param_3];
	ld.param.u64 	%rd17, [TensorMaxPool_param_4];
	ld.param.u64 	%rd18, [TensorMaxPool_param_5];
	ld.param.u32 	%r93, [TensorMaxPool_param_6];
	ld.param.u32 	%r94, [TensorMaxPool_param_7];
	ld.param.u32 	%r95, [TensorMaxPool_param_8];
	ld.param.u32 	%r96, [TensorMaxPool_param_9];
	ld.param.u32 	%r97, [TensorMaxPool_param_11];
	ld.param.u32 	%r98, [TensorMaxPool_param_12];
	ld.param.u32 	%r99, [TensorMaxPool_param_13];
	ld.param.u32 	%r100, [TensorMaxPool_param_14];
	ld.param.u32 	%r101, [TensorMaxPool_param_15];
	ld.param.u32 	%r102, [TensorMaxPool_param_16];
	ld.param.u32 	%r103, [TensorMaxPool_param_17];
	cvta.to.global.u64 	%rd1, %rd15;
	cvta.to.global.u64 	%rd2, %rd16;
	cvta.to.global.u64 	%rd3, %rd18;
	cvta.to.global.u64 	%rd4, %rd17;
	mov.u32 	%r104, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r105, %tid.x;
	mad.lo.s32 	%r172, %r104, %r1, %r105;
	setp.ge.s32	%p1, %r172, %r92;
	@%p1 bra 	BB50_33;

	mul.lo.s32 	%r3, %r95, %r94;
	mul.lo.s32 	%r4, %r3, %r96;
	mov.u32 	%r106, %nctaid.x;
	mul.lo.s32 	%r5, %r106, %r1;
	and.b32  	%r6, %r100, 3;
	setp.eq.s32	%p2, %r103, 0;
	@%p2 bra 	BB50_18;

	cvta.to.global.u64 	%rd5, %rd14;

BB50_3:
	div.s32 	%r108, %r172, %r93;
	rem.s32 	%r9, %r108, %r96;
	div.s32 	%r109, %r108, %r96;
	rem.s32 	%r110, %r172, %r93;
	mul.wide.s32 	%rd19, %r110, 4;
	add.s64 	%rd20, %rd4, %rd19;
	ld.global.nc.f32 	%f26, [%rd20];
	cvt.rzi.ftz.s32.f32	%r10, %f26;
	add.s64 	%rd21, %rd3, %rd19;
	ld.global.nc.f32 	%f27, [%rd21];
	cvt.rzi.ftz.s32.f32	%r11, %f27;
	div.s32 	%r12, %r10, %r101;
	div.s32 	%r13, %r11, %r102;
	mul.lo.s32 	%r14, %r109, %r96;
	mul.lo.s32 	%r111, %r3, %r9;
	mad.lo.s32 	%r15, %r4, %r109, %r111;
	mov.f32 	%f62, 0f00000000;
	mov.u32 	%r191, -1;
	setp.lt.s32	%p3, %r99, 1;
	@%p3 bra 	BB50_17;

	mad.lo.s32 	%r116, %r14, %r3, %r111;
	mul.wide.s32 	%rd22, %r116, 4;
	add.s64 	%rd6, %rd1, %rd22;
	mov.f32 	%f62, 0f00000000;
	mov.u32 	%r191, -1;
	mov.u32 	%r173, 0;
	mov.u32 	%r190, %r173;

BB50_5:
	setp.lt.s32	%p4, %r100, 1;
	@%p4 bra 	BB50_16;

	add.s32 	%r122, %r173, %r10;
	mad.lo.s32 	%r19, %r122, %r94, %r11;
	mov.u32 	%r176, 0;
	mov.f32 	%f29, 0f00000000;
	setp.eq.s32	%p5, %r6, 0;
	@%p5 bra 	BB50_7;

	setp.eq.s32	%p6, %r6, 1;
	@%p6 bra 	BB50_12;

	setp.eq.s32	%p7, %r6, 2;
	@%p7 bra 	BB50_11;

	add.s32 	%r124, %r15, %r19;
	mul.wide.s32 	%rd23, %r124, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.nc.f32 	%f30, [%rd24];
	setp.gt.ftz.f32	%p8, %f30, %f62;
	setp.lt.s32	%p9, %r191, 0;
	or.pred  	%p10, %p9, %p8;
	selp.f32	%f62, %f30, %f62, %p10;
	selp.b32	%r191, %r190, %r191, %p10;
	add.s32 	%r190, %r190, 1;
	mov.u32 	%r176, 1;

BB50_11:
	add.s32 	%r125, %r19, %r176;
	add.s32 	%r126, %r15, %r125;
	mul.wide.s32 	%rd25, %r126, 4;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.nc.f32 	%f31, [%rd26];
	setp.gt.ftz.f32	%p11, %f31, %f62;
	setp.lt.s32	%p12, %r191, 0;
	or.pred  	%p13, %p12, %p11;
	selp.f32	%f62, %f31, %f62, %p13;
	selp.b32	%r191, %r190, %r191, %p13;
	add.s32 	%r190, %r190, 1;
	add.s32 	%r176, %r176, 1;

BB50_12:
	add.s32 	%r127, %r19, %r176;
	add.s32 	%r128, %r15, %r127;
	mul.wide.s32 	%rd27, %r128, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.nc.f32 	%f32, [%rd28];
	setp.gt.ftz.f32	%p14, %f32, %f62;
	setp.lt.s32	%p15, %r191, 0;
	or.pred  	%p16, %p15, %p14;
	selp.f32	%f59, %f32, %f62, %p16;
	selp.b32	%r184, %r190, %r191, %p16;
	add.s32 	%r183, %r190, 1;
	add.s32 	%r176, %r176, 1;
	mov.u32 	%r190, %r183;
	mov.u32 	%r191, %r184;
	mov.f32 	%f62, %f59;
	bra.uni 	BB50_13;

BB50_7:
	mov.u32 	%r183, %r190;
	mov.u32 	%r184, %r191;
	mov.f32 	%f59, %f62;
	mov.u32 	%r190, %r176;
	mov.u32 	%r191, %r176;
	mov.f32 	%f62, %f29;

BB50_13:
	setp.lt.u32	%p17, %r100, 4;
	@%p17 bra 	BB50_16;

	add.s32 	%r129, %r19, %r176;
	mul.wide.s32 	%rd29, %r129, 4;
	add.s64 	%rd46, %rd6, %rd29;
	mov.u32 	%r190, %r183;
	mov.u32 	%r191, %r184;
	mov.f32 	%f62, %f59;

BB50_15:
	ld.global.nc.f32 	%f33, [%rd46];
	setp.gt.ftz.f32	%p18, %f33, %f62;
	setp.lt.s32	%p19, %r191, 0;
	or.pred  	%p20, %p19, %p18;
	selp.f32	%f34, %f33, %f62, %p20;
	selp.b32	%r130, %r190, %r191, %p20;
	setp.lt.s32	%p21, %r130, 0;
	ld.global.nc.f32 	%f35, [%rd46+4];
	setp.gt.ftz.f32	%p22, %f35, %f34;
	or.pred  	%p23, %p21, %p22;
	selp.f32	%f36, %f35, %f34, %p23;
	add.s32 	%r131, %r190, 1;
	selp.b32	%r132, %r131, %r130, %p23;
	setp.lt.s32	%p24, %r132, 0;
	ld.global.nc.f32 	%f37, [%rd46+8];
	setp.gt.ftz.f32	%p25, %f37, %f36;
	or.pred  	%p26, %p24, %p25;
	selp.f32	%f38, %f37, %f36, %p26;
	add.s32 	%r133, %r190, 2;
	selp.b32	%r134, %r133, %r132, %p26;
	setp.lt.s32	%p27, %r134, 0;
	ld.global.nc.f32 	%f39, [%rd46+12];
	setp.gt.ftz.f32	%p28, %f39, %f38;
	or.pred  	%p29, %p27, %p28;
	selp.f32	%f62, %f39, %f38, %p29;
	add.s32 	%r135, %r190, 3;
	selp.b32	%r191, %r135, %r134, %p29;
	add.s32 	%r190, %r190, 4;
	add.s64 	%rd46, %rd46, 16;
	add.s32 	%r176, %r176, 4;
	setp.lt.s32	%p30, %r176, %r100;
	@%p30 bra 	BB50_15;

BB50_16:
	add.s32 	%r173, %r173, 1;
	setp.lt.s32	%p31, %r173, %r99;
	@%p31 bra 	BB50_5;

BB50_17:
	add.s32 	%r136, %r14, %r9;
	mul.lo.s32 	%r137, %r136, %r98;
	mad.lo.s32 	%r138, %r12, %r97, %r13;
	mad.lo.s32 	%r139, %r137, %r97, %r138;
	mul.wide.s32 	%rd30, %r139, 4;
	add.s64 	%rd31, %rd5, %rd30;
	cvt.rn.f32.s32	%f40, %r191;
	st.global.f32 	[%rd31], %f40;
	add.s64 	%rd32, %rd2, %rd30;
	st.global.f32 	[%rd32], %f62;
	add.s32 	%r172, %r5, %r172;
	setp.lt.s32	%p32, %r172, %r92;
	@%p32 bra 	BB50_3;
	bra.uni 	BB50_33;

BB50_18:
	div.s32 	%r140, %r172, %r93;
	rem.s32 	%r52, %r140, %r96;
	div.s32 	%r141, %r140, %r96;
	rem.s32 	%r142, %r172, %r93;
	mul.wide.s32 	%rd33, %r142, 4;
	add.s64 	%rd34, %rd4, %rd33;
	ld.global.nc.f32 	%f42, [%rd34];
	cvt.rzi.ftz.s32.f32	%r53, %f42;
	add.s64 	%rd35, %rd3, %rd33;
	ld.global.nc.f32 	%f43, [%rd35];
	cvt.rzi.ftz.s32.f32	%r54, %f43;
	div.s32 	%r55, %r53, %r101;
	div.s32 	%r56, %r54, %r102;
	mul.lo.s32 	%r57, %r141, %r96;
	mul.lo.s32 	%r143, %r3, %r52;
	mad.lo.s32 	%r58, %r4, %r141, %r143;
	mov.f32 	%f70, 0f00000000;
	setp.lt.s32	%p33, %r99, 1;
	@%p33 bra 	BB50_32;

	mad.lo.s32 	%r148, %r57, %r3, %r143;
	mul.wide.s32 	%rd36, %r148, 4;
	add.s64 	%rd10, %rd1, %rd36;
	mov.f32 	%f70, 0f00000000;
	mov.u32 	%r212, -1;
	mov.u32 	%r194, 0;
	mov.u32 	%r211, %r194;

BB50_20:
	setp.lt.s32	%p34, %r100, 1;
	@%p34 bra 	BB50_31;

	add.s32 	%r154, %r194, %r53;
	mad.lo.s32 	%r62, %r154, %r94, %r54;
	mov.u32 	%r197, 0;
	mov.f32 	%f45, 0f00000000;
	setp.eq.s32	%p35, %r6, 0;
	@%p35 bra 	BB50_22;

	setp.eq.s32	%p36, %r6, 1;
	@%p36 bra 	BB50_27;

	setp.eq.s32	%p37, %r6, 2;
	@%p37 bra 	BB50_26;

	add.s32 	%r156, %r58, %r62;
	mul.wide.s32 	%rd37, %r156, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.nc.f32 	%f46, [%rd38];
	setp.gt.ftz.f32	%p38, %f46, %f70;
	setp.lt.s32	%p39, %r212, 0;
	or.pred  	%p40, %p39, %p38;
	selp.f32	%f70, %f46, %f70, %p40;
	selp.b32	%r212, %r211, %r212, %p40;
	add.s32 	%r211, %r211, 1;
	mov.u32 	%r197, 1;

BB50_26:
	add.s32 	%r157, %r62, %r197;
	add.s32 	%r158, %r58, %r157;
	mul.wide.s32 	%rd39, %r158, 4;
	add.s64 	%rd40, %rd1, %rd39;
	ld.global.nc.f32 	%f47, [%rd40];
	setp.gt.ftz.f32	%p41, %f47, %f70;
	setp.lt.s32	%p42, %r212, 0;
	or.pred  	%p43, %p42, %p41;
	selp.f32	%f70, %f47, %f70, %p43;
	selp.b32	%r212, %r211, %r212, %p43;
	add.s32 	%r211, %r211, 1;
	add.s32 	%r197, %r197, 1;

BB50_27:
	add.s32 	%r159, %r62, %r197;
	add.s32 	%r160, %r58, %r159;
	mul.wide.s32 	%rd41, %r160, 4;
	add.s64 	%rd42, %rd1, %rd41;
	ld.global.nc.f32 	%f48, [%rd42];
	setp.gt.ftz.f32	%p44, %f48, %f70;
	setp.lt.s32	%p45, %r212, 0;
	or.pred  	%p46, %p45, %p44;
	selp.f32	%f67, %f48, %f70, %p46;
	selp.b32	%r205, %r211, %r212, %p46;
	add.s32 	%r204, %r211, 1;
	add.s32 	%r197, %r197, 1;
	mov.u32 	%r211, %r204;
	mov.u32 	%r212, %r205;
	mov.f32 	%f70, %f67;
	bra.uni 	BB50_28;

BB50_22:
	mov.u32 	%r204, %r211;
	mov.u32 	%r205, %r212;
	mov.f32 	%f67, %f70;
	mov.u32 	%r211, %r197;
	mov.u32 	%r212, %r197;
	mov.f32 	%f70, %f45;

BB50_28:
	setp.lt.u32	%p47, %r100, 4;
	@%p47 bra 	BB50_31;

	add.s32 	%r161, %r62, %r197;
	mul.wide.s32 	%rd43, %r161, 4;
	add.s64 	%rd47, %rd10, %rd43;
	mov.u32 	%r211, %r204;
	mov.u32 	%r212, %r205;
	mov.f32 	%f70, %f67;

BB50_30:
	ld.global.nc.f32 	%f49, [%rd47];
	setp.gt.ftz.f32	%p48, %f49, %f70;
	setp.lt.s32	%p49, %r212, 0;
	or.pred  	%p50, %p49, %p48;
	selp.f32	%f50, %f49, %f70, %p50;
	selp.b32	%r162, %r211, %r212, %p50;
	setp.lt.s32	%p51, %r162, 0;
	ld.global.nc.f32 	%f51, [%rd47+4];
	setp.gt.ftz.f32	%p52, %f51, %f50;
	or.pred  	%p53, %p51, %p52;
	selp.f32	%f52, %f51, %f50, %p53;
	add.s32 	%r163, %r211, 1;
	selp.b32	%r164, %r163, %r162, %p53;
	setp.lt.s32	%p54, %r164, 0;
	ld.global.nc.f32 	%f53, [%rd47+8];
	setp.gt.ftz.f32	%p55, %f53, %f52;
	or.pred  	%p56, %p54, %p55;
	selp.f32	%f54, %f53, %f52, %p56;
	add.s32 	%r165, %r211, 2;
	selp.b32	%r166, %r165, %r164, %p56;
	setp.lt.s32	%p57, %r166, 0;
	ld.global.nc.f32 	%f55, [%rd47+12];
	setp.gt.ftz.f32	%p58, %f55, %f54;
	or.pred  	%p59, %p57, %p58;
	selp.f32	%f70, %f55, %f54, %p59;
	add.s32 	%r167, %r211, 3;
	selp.b32	%r212, %r167, %r166, %p59;
	add.s32 	%r211, %r211, 4;
	add.s64 	%rd47, %rd47, 16;
	add.s32 	%r197, %r197, 4;
	setp.lt.s32	%p60, %r197, %r100;
	@%p60 bra 	BB50_30;

BB50_31:
	add.s32 	%r194, %r194, 1;
	setp.lt.s32	%p61, %r194, %r99;
	@%p61 bra 	BB50_20;

BB50_32:
	add.s32 	%r168, %r57, %r52;
	mul.lo.s32 	%r169, %r168, %r98;
	mad.lo.s32 	%r170, %r55, %r97, %r56;
	mad.lo.s32 	%r171, %r169, %r97, %r170;
	mul.wide.s32 	%rd44, %r171, 4;
	add.s64 	%rd45, %rd2, %rd44;
	st.global.f32 	[%rd45], %f70;
	add.s32 	%r172, %r5, %r172;
	setp.lt.s32	%p62, %r172, %r92;
	@%p62 bra 	BB50_18;

BB50_33:
	ret;
}

	// .globl	TensorReverseMaxPool
.visible .entry TensorReverseMaxPool(
	.param .u32 TensorReverseMaxPool_param_0,
	.param .u64 TensorReverseMaxPool_param_1,
	.param .u64 TensorReverseMaxPool_param_2,
	.param .u64 TensorReverseMaxPool_param_3,
	.param .u32 TensorReverseMaxPool_param_4,
	.param .u32 TensorReverseMaxPool_param_5,
	.param .u32 TensorReverseMaxPool_param_6,
	.param .u32 TensorReverseMaxPool_param_7,
	.param .u32 TensorReverseMaxPool_param_8,
	.param .u32 TensorReverseMaxPool_param_9,
	.param .u32 TensorReverseMaxPool_param_10,
	.param .u32 TensorReverseMaxPool_param_11,
	.param .u32 TensorReverseMaxPool_param_12,
	.param .u32 TensorReverseMaxPool_param_13
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<43>;
	.reg .b64 	%rd<12>;


	ld.param.u32 	%r8, [TensorReverseMaxPool_param_0];
	ld.param.u64 	%rd4, [TensorReverseMaxPool_param_1];
	ld.param.u64 	%rd5, [TensorReverseMaxPool_param_2];
	ld.param.u64 	%rd6, [TensorReverseMaxPool_param_3];
	ld.param.u32 	%r9, [TensorReverseMaxPool_param_4];
	ld.param.u32 	%r10, [TensorReverseMaxPool_param_5];
	ld.param.u32 	%r11, [TensorReverseMaxPool_param_6];
	ld.param.u32 	%r12, [TensorReverseMaxPool_param_8];
	ld.param.u32 	%r13, [TensorReverseMaxPool_param_9];
	ld.param.u32 	%r14, [TensorReverseMaxPool_param_11];
	ld.param.u32 	%r15, [TensorReverseMaxPool_param_12];
	ld.param.u32 	%r16, [TensorReverseMaxPool_param_13];
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r18, %tid.x;
	mad.lo.s32 	%r42, %r17, %r1, %r18;
	setp.ge.s32	%p1, %r42, %r8;
	@%p1 bra 	BB51_3;

	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd4;
	mul.lo.s32 	%r19, %r12, %r11;
	mul.lo.s32 	%r3, %r19, %r13;
	mul.lo.s32 	%r4, %r13, %r12;
	mov.u32 	%r20, %nctaid.x;
	mul.lo.s32 	%r5, %r20, %r1;

BB51_2:
	div.s32 	%r21, %r42, %r9;
	rem.s32 	%r22, %r21, %r10;
	div.s32 	%r23, %r21, %r10;
	rem.s32 	%r24, %r23, %r11;
	div.s32 	%r25, %r23, %r11;
	mad.lo.s32 	%r26, %r25, %r11, %r24;
	mul.lo.s32 	%r27, %r26, %r10;
	mul.lo.s32 	%r28, %r4, %r24;
	mad.lo.s32 	%r29, %r3, %r25, %r28;
	rem.s32 	%r30, %r42, %r9;
	mad.lo.s32 	%r31, %r22, %r9, %r30;
	mad.lo.s32 	%r32, %r27, %r9, %r31;
	mul.wide.s32 	%rd7, %r32, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.nc.f32 	%f1, [%rd8];
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.nc.f32 	%f2, [%rd9];
	cvt.rzi.ftz.s32.f32	%r33, %f2;
	mov.u32 	%r34, 0;
	max.s32 	%r35, %r34, %r33;
	div.s32 	%r36, %r35, %r14;
	mad.lo.s32 	%r37, %r22, %r15, %r36;
	rem.s32 	%r38, %r35, %r14;
	mad.lo.s32 	%r39, %r30, %r16, %r38;
	mad.lo.s32 	%r40, %r37, %r12, %r39;
	add.s32 	%r41, %r29, %r40;
	mul.wide.s32 	%rd10, %r41, 4;
	add.s64 	%rd11, %rd1, %rd10;
	st.global.f32 	[%rd11], %f1;
	add.s32 	%r42, %r5, %r42;
	setp.lt.s32	%p2, %r42, %r8;
	@%p2 bra 	BB51_2;

BB51_3:
	ret;
}

	// .globl	CalculateDistances
.visible .entry CalculateDistances(
	.param .u64 CalculateDistances_param_0,
	.param .u64 CalculateDistances_param_1,
	.param .u64 CalculateDistances_param_2,
	.param .u32 CalculateDistances_param_3,
	.param .u32 CalculateDistances_param_4,
	.param .u32 CalculateDistances_param_5,
	.param .u32 CalculateDistances_param_6
)
{
	.reg .pred 	%p<11>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<56>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<32>;


	ld.param.u64 	%rd4, [CalculateDistances_param_0];
	ld.param.u64 	%rd5, [CalculateDistances_param_1];
	ld.param.u64 	%rd6, [CalculateDistances_param_2];
	ld.param.u32 	%r20, [CalculateDistances_param_3];
	ld.param.u32 	%r21, [CalculateDistances_param_4];
	ld.param.u32 	%r22, [CalculateDistances_param_5];
	ld.param.u32 	%r23, [CalculateDistances_param_6];
	mov.u32 	%r24, %ntid.x;
	mov.u32 	%r25, %ctaid.x;
	mov.u32 	%r26, %tid.x;
	mad.lo.s32 	%r50, %r25, %r24, %r26;
	setp.ge.s32	%p1, %r50, %r22;
	@%p1 bra 	BB52_15;

	mov.u32 	%r27, %nctaid.z;
	mov.u32 	%r28, %ntid.z;
	mul.lo.s32 	%r2, %r27, %r28;
	cvta.to.global.u64 	%rd7, %rd4;

BB52_2:
	mov.u32 	%r29, %ntid.y;
	mov.u32 	%r30, %ctaid.y;
	mov.u32 	%r31, %tid.y;
	mad.lo.s32 	%r51, %r30, %r29, %r31;
	setp.ge.s32	%p2, %r51, %r21;
	@%p2 bra 	BB52_14;

BB52_3:
	mov.u32 	%r37, %ctaid.z;
	mov.u32 	%r38, %tid.z;
	mad.lo.s32 	%r53, %r37, %r28, %r38;
	setp.ge.s32	%p3, %r53, %r20;
	@%p3 bra 	BB52_13;

	setp.eq.s32	%p4, %r23, 0;
	mul.wide.s32 	%rd8, %r51, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	mul.wide.s32 	%rd12, %r50, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	@%p4 bra 	BB52_11;
	bra.uni 	BB52_5;

BB52_11:
	mad.lo.s32 	%r55, %r37, %r28, %r38;
	mad.lo.s32 	%r54, %r20, %r51, %r55;
	cvt.s64.s32	%rd1, %r50;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd5;

BB52_12:
	mul.wide.s32 	%rd24, %r55, 8;
	add.s64 	%rd25, %rd3, %rd24;
	ld.global.nc.u64 	%rd26, [%rd25];
	cvta.to.global.u64 	%rd27, %rd26;
	shl.b64 	%rd28, %rd1, 2;
	add.s64 	%rd29, %rd27, %rd28;
	ld.global.f32 	%f9, [%rd29];
	sub.ftz.f32 	%f10, %f1, %f9;
	mul.ftz.f32 	%f11, %f10, %f10;
	mul.wide.s32 	%rd30, %r54, 4;
	add.s64 	%rd31, %rd2, %rd30;
	atom.global.add.f32 	%f12, [%rd31], %f11;
	add.s32 	%r54, %r54, %r2;
	add.s32 	%r55, %r55, %r2;
	setp.lt.s32	%p8, %r55, %r20;
	@%p8 bra 	BB52_12;
	bra.uni 	BB52_13;

BB52_5:
	mad.lo.s32 	%r52, %r20, %r51, %r53;

BB52_6:
	cvta.to.global.u64 	%rd14, %rd5;
	mul.wide.s32 	%rd15, %r53, 8;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.nc.u64 	%rd17, [%rd16];
	cvta.to.global.u64 	%rd18, %rd17;
	add.s64 	%rd20, %rd18, %rd12;
	ld.global.f32 	%f2, [%rd20];
	mov.f32 	%f13, 0f00000000;
	setp.eq.s32	%p5, %r23, 2;
	@%p5 bra 	BB52_9;
	bra.uni 	BB52_7;

BB52_9:
	sub.ftz.f32 	%f7, %f1, %f2;
	cvt.ftz.f64.f32	%fd1, %f7;
	abs.f64 	%fd2, %fd1;
	cvt.rn.ftz.f32.f64	%f13, %fd2;
	bra.uni 	BB52_10;

BB52_7:
	setp.ne.s32	%p6, %r23, 1;
	@%p6 bra 	BB52_10;

	mul.ftz.f32 	%f13, %f1, %f2;

BB52_10:
	cvta.to.global.u64 	%rd21, %rd6;
	mul.wide.s32 	%rd22, %r52, 4;
	add.s64 	%rd23, %rd21, %rd22;
	atom.global.add.f32 	%f8, [%rd23], %f13;
	add.s32 	%r52, %r52, %r2;
	add.s32 	%r53, %r53, %r2;
	setp.lt.s32	%p7, %r53, %r20;
	@%p7 bra 	BB52_6;

BB52_13:
	mov.u32 	%r46, %nctaid.y;
	mad.lo.s32 	%r51, %r46, %r29, %r51;
	setp.lt.s32	%p9, %r51, %r21;
	@%p9 bra 	BB52_3;

BB52_14:
	mov.u32 	%r48, %nctaid.x;
	mad.lo.s32 	%r50, %r48, %r24, %r50;
	setp.lt.s32	%p10, %r50, %r22;
	@%p10 bra 	BB52_2;

BB52_15:
	ret;
}

	// .globl	MultiCosineDistance
.visible .entry MultiCosineDistance(
	.param .u64 MultiCosineDistance_param_0,
	.param .u64 MultiCosineDistance_param_1,
	.param .u64 MultiCosineDistance_param_2,
	.param .u64 MultiCosineDistance_param_3,
	.param .u64 MultiCosineDistance_param_4,
	.param .u32 MultiCosineDistance_param_5,
	.param .u32 MultiCosineDistance_param_6,
	.param .u32 MultiCosineDistance_param_7
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<27>;


	ld.param.u64 	%rd2, [MultiCosineDistance_param_0];
	ld.param.u64 	%rd3, [MultiCosineDistance_param_1];
	ld.param.u64 	%rd4, [MultiCosineDistance_param_2];
	ld.param.u64 	%rd5, [MultiCosineDistance_param_3];
	ld.param.u64 	%rd6, [MultiCosineDistance_param_4];
	ld.param.u32 	%r14, [MultiCosineDistance_param_5];
	ld.param.u32 	%r15, [MultiCosineDistance_param_6];
	ld.param.u32 	%r16, [MultiCosineDistance_param_7];
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r18, %ntid.x;
	mov.u32 	%r19, %tid.x;
	mad.lo.s32 	%r41, %r17, %r18, %r19;
	setp.ge.s32	%p1, %r41, %r16;
	@%p1 bra 	BB53_8;

	cvta.to.global.u64 	%rd1, %rd3;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %ntid.z;
	mov.u32 	%r22, %tid.z;
	mad.lo.s32 	%r2, %r20, %r21, %r22;
	cvta.to.global.u64 	%rd7, %rd2;
	cvta.to.global.u64 	%rd20, %rd4;
	cvta.to.global.u64 	%rd23, %rd5;
	cvta.to.global.u64 	%rd25, %rd6;

BB53_2:
	mov.u32 	%r23, %ntid.y;
	mov.u32 	%r24, %ctaid.y;
	mov.u32 	%r25, %tid.y;
	mad.lo.s32 	%r42, %r24, %r23, %r25;
	setp.ge.s32	%p2, %r42, %r15;
	@%p2 bra 	BB53_7;

BB53_3:
	setp.ge.s32	%p3, %r2, %r14;
	@%p3 bra 	BB53_6;

	mul.wide.s32 	%rd8, %r42, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	mul.wide.s32 	%rd12, %r41, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.f32 	%f1, [%rd13];
	mul.ftz.f32 	%f2, %f1, %f1;
	mad.lo.s32 	%r33, %r20, %r21, %r22;
	mad.lo.s32 	%r43, %r14, %r42, %r33;
	mov.u32 	%r44, %r2;

BB53_5:
	mul.wide.s32 	%rd14, %r44, 8;
	add.s64 	%rd15, %rd1, %rd14;
	ld.global.nc.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd17, %rd16;
	add.s64 	%rd19, %rd17, %rd12;
	ld.global.f32 	%f3, [%rd19];
	mul.wide.s32 	%rd21, %r43, 4;
	add.s64 	%rd22, %rd20, %rd21;
	atom.global.add.f32 	%f4, [%rd22], %f2;
	add.s64 	%rd24, %rd23, %rd21;
	mul.ftz.f32 	%f5, %f1, %f3;
	atom.global.add.f32 	%f6, [%rd24], %f5;
	add.s64 	%rd26, %rd25, %rd21;
	mul.ftz.f32 	%f7, %f3, %f3;
	atom.global.add.f32 	%f8, [%rd26], %f7;
	mov.u32 	%r35, %nctaid.z;
	mul.lo.s32 	%r36, %r35, %r21;
	add.s32 	%r44, %r44, %r36;
	add.s32 	%r43, %r43, %r36;
	setp.lt.s32	%p4, %r44, %r14;
	@%p4 bra 	BB53_5;

BB53_6:
	mov.u32 	%r37, %nctaid.y;
	mad.lo.s32 	%r42, %r37, %r23, %r42;
	setp.lt.s32	%p5, %r42, %r15;
	@%p5 bra 	BB53_3;

BB53_7:
	mov.u32 	%r39, %nctaid.x;
	mad.lo.s32 	%r41, %r39, %r18, %r41;
	setp.lt.s32	%p6, %r41, %r16;
	@%p6 bra 	BB53_2;

BB53_8:
	ret;
}


